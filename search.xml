<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>复试复习资料</title>
      <link href="/2023/03/25/%E5%A4%8D%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/"/>
      <url>/2023/03/25/%E5%A4%8D%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><ol><li><p>TCP位于<strong>传输层</strong>，IP位于<strong>网络层</strong>，UPD应用：<strong>DNS</strong>，<strong>媒体流传输</strong>，<strong>游戏开发</strong>，<strong>网络管理</strong></p></li><li><p>TCP/IP有几层？为什么没有物理层</p><p>应用层、传输层、网络层、链路层</p><p>TCP/IP模型是网络互联的模型,是已构建好的局域网的互联模型,而只有在局域网的构建中才需要考虑物理层</p></li><li><p>计算机网络中哪里存在流量控制</p><ul><li>数据链路层、传输层、应用层中，通过停止等待、选择重传、滑动窗口机制实现流量控制</li></ul></li><li><p>交换机、路由器和集线器三者的区别</p><p>集线器是物理层设备，用于将多个设备连接在一起形成局域网，其功能是将收到的信号广播给所有连接的设备。不能隔离广播域和冲突域。</p><p>交换机是数据链路层设备，他负责将网络层提供的数据包分割成帧，并对每一帧添加头部和尾部，以便在物理层进行传输。交换机的主要功能是根据目标MAC地址对数据帧进行转发。可以隔离冲突域，不能隔离广播域。</p><p>路由器是网络层设备，它通过查询路由表上的IP地址，将数据包转发到合适的接口。既可以隔离冲突域，又可以隔离广播域。</p></li><li><p>IP地址和MAC地址的区别</p><p>IP地址是一个32位或128位的二进制数，通常用点分十进制来表示。MAC地址是一个48位二进制数，通常用冒号分隔的十六进制数表示。</p><p>IP地址是用于在广域网上唯一标识一台设备，是逻辑地址，MAC地址用于在局域网上唯一标识一台设备，是物理地址。</p><p>在分组转发时，MAC地址进入新的网络会发生变化，IP地址基本不变。</p></li><li><p>什么是MAC地址，为什么要有MAC地址</p><p>MAC地址是用于标识网络设备的唯一地址。</p><p>MAC地址起到记录下一跳信息的作用。</p><p>在网络通信中，MAC地址被用于识别网络上的设备，以便将数据包正确地发送到目标设备。</p></li><li><p>网路层设备有哪些</p><p>路由器、网关、路由交换机、NAT设备、防火墙</p></li><li><p>TCP和UDP的区别</p><p>可靠性：TCP是面向连接的，是可靠的数据传输。UDP是无连接的，不保证数据可靠性。</p><p>流量控制：TCP通过滑动窗口协议实现流量控制，UDP没有流量控制机制。</p><p>拥塞控制：TCP通过拥塞窗口协议实现拥塞控制，UDP没有拥塞控制机制。</p><p>适用场景：TCP使用与对数据传输可靠性高的应用场景，如文件传输、电子邮件等。UDP适用于对传输速度和实时性要求较高的应用场景，如实时音频传输、在线游戏等。</p></li><li><p>TCP依靠什么实现可靠传输</p></li></ol><ul><li><p>确认和重传机制：TCP使用序列号和确认号来跟踪发送和接收的数据，接收方会发送一个确认消息来确认已经收到的数据，如果发送方没有收到确认信号会进行重传，直到收到为止。</p></li><li><p>流量控制：TCP使用窗口机制来限制对方发送数据的速率，接收方告诉发送方最大的窗口以免数据丢失。</p></li><li><p>拥塞控制：当网络拥塞时，TCP减少发送数据的速率。</p></li><li><p>数据校验和机制：TCP使用校验和机制保证数据的完整性和可靠性。</p></li></ul><ol start="10"><li>内部网关协议有哪些</li></ol><ul><li><p>RIP：小规模，基于距离向量的路由协议，收敛速度较慢，应用层协议，交换自己的路由表</p></li><li><p>OSPF：基于链路状态的路由协议，可实现快速收敛和负载平衡，网络层协议，交换与自己相连接的所有路由器的链路状态</p></li></ul><ol start="11"><li>B/S和C/S模型</li></ol><ul><li>B/S架构是一种基于浏览器和服务器的应用架构模式，其中浏览器作为客户端，用户通过浏览器发送请求给服务器，服务器接收请求并处理，然后返回客户端，这种架构通常使用Web技术。</li><li>C/S架构是一种基于客户端和服务器的应用架构模式，其中客户端和服务器之间通过网络进行通信。客户端通常是一个独立的应用程序，需要在用户的计算机上安装，用户可以通过客户端程序与服务器进行通信，并在本地处理数据。</li></ul><ol start="12"><li>计算机网络中地址和对应的层</li></ol><ul><li>数据链路层：MAC地址</li><li>网络层：IP地址</li><li>传输层：端口号</li><li>应用层：URL</li></ul><ol start="13"><li>路由器的作用</li></ol><ul><li>网络互联：用于连接局域网和广域网，实现不同网络的通信。</li><li>数据处理：提供分组过滤、分组转发。</li><li>网络管理：提供路由配置器管理、性能管理、流量控制。</li></ul><ol start="14"><li><p>路由器的定义</p><p>路由器是一种网络层设备，用与将数据包从一个网络传输到另一个网路。</p></li><li><p>计算机网络的拓扑结构</p></li></ol><ul><li>网状</li><li>星型</li><li>环形</li><li>总线型</li><li>混合型</li></ul><ol start="16"><li>计算机网络按照覆盖可以划分为什么</li></ol><ul><li>局域网</li><li>城域网</li><li>广域网</li></ul><ol start="17"><li><p>网关是什么</p><p>网关又称为协议转换器。网关的功能是实现网络之间的相互连接。网关不仅可以让广域网之间相互连接，也可以让局域网之间相互连接。网关在计算机和设备之间起转换的作用，相当于一个翻译器，可以使不同的协议、语言、数据在不同的系统之间进行转换。</p></li><li><p>拥塞控制算法</p><ul><li>慢开始：在连接建立之初，TCP会将发送窗口设置为一个较小的值，然后随着数据包的确认返回，逐渐增大发送窗口。</li><li>拥塞避免：一旦发送窗口达到阈值，TCP会切换到拥塞避免模式，发送窗口开始线性增大。</li><li>快重传：如果没有在规定的时间内收到对数据包的确认，TCP会立即重传。</li><li>快恢复：如果连续收到三个相同的确认帧，立即将阈值减半，并将发送窗口设为阈值，然后线性增大。</li></ul></li><li><p>如何判断是否出现拥塞</p><p>丢包率高、延迟高、带宽利用率高</p></li><li><p>数据链路层三个基本问题</p><ul><li>封装</li><li>数据传输</li><li>差错检验</li></ul></li><li><p>如何解决这三个问题</p><ul><li>在数据帧前后添加上头部和尾部</li><li>使用比特/字节填充</li><li>奇偶校验、CRC循环冗余检验</li></ul></li><li><p>HTTPS和HTTP</p><ul><li>HTTP是超文本传输协议，信息明文传输，HTTPS具有安全性的SSL加密传输</li><li>连接方式不同，端口也不同，前者是80，后者是443</li></ul></li></ol><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ol><li><p>Hash函数的特点，如何处理冲突</p><p>特点：</p><ul><li>一致性</li><li>不可逆性</li><li>高效性</li></ul><p>处理冲突：</p><ul><li>开放地址法</li><li>链地址法</li><li>再哈希法</li></ul></li><li><p>哈希表适合存储什么样的数据</p><ul><li>表示的值太大</li><li>自然数不连续</li><li>不是自然数</li></ul></li><li><p>影响哈希表平均查找长度的因素</p><ul><li>哈希函数</li><li>装填因子</li><li>处理冲突的方法</li></ul></li><li><p>最优和最差相同的排序算法</p><p>基数排序，归并排序，桶排序，选择排序</p></li><li><p>线索二叉树</p><p>在线索二叉树中，每个节点除了保存左右树指针之外，还保存了两个附加指针</p><p>前驱线索：（先序、中序、后序）中前一个遍历的节点</p><p>后继线索：（先序、中序、后序）中后一个遍历的节点</p></li><li><p>散列表的建立方法</p><ul><li><p>直接定址法</p><p>关键码和地址之间存在某个线性函数关系</p></li><li><p>数字分析法</p><p>选取关键码的若干位组合作为散列地址</p></li><li><p>除留余数法</p><p>选择合适的模数，一般要求小于等于表长的最大质数</p></li><li><p>平方取中法</p><p>关键码平方后取中间几位作为地址</p></li><li><p>折叠法</p><p>将关键码分割成位数相等的几位，然后相加求和</p></li><li><p>随机数法</p><p>采用随机函数作为散列函数</p></li></ul></li><li><p>二叉树和度为2的树的区别</p><ul><li>度不同：度为2的要求至少存在一个度为2的节点，而二叉树的要求是度不能超过2</li><li>结构不同：度为2的树有两个分支，但左右分支没有明确的区分，二叉树的左右子树有明确的区分</li><li>遍历方式不同：二叉树的遍历方式有前、中、后序遍历，而度为2的树没有明确的中序遍历</li></ul></li><li><p>DFS和BFS在工程上的实际应用</p><ul><li>网络爬虫</li><li>社交网络</li><li>迷宫问题</li><li>图像处理</li></ul></li><li><p>数据结构的存储结构和对应的存储模式</p><ul><li>线性表：一对一</li><li>树：一对多</li><li>图：多对多</li></ul></li><li><p>关键路径和关键活动</p></li></ol><p>   关键路径是指项目中的一系列活动，它们的完成时间直接影响整个项目的完成时间。如果关键路径上的任何一个活动（关键活动）延迟，那么整个项目的完成时间都会推移。</p><ol start="11"><li>图的存储方式<ul><li>邻接矩阵</li><li>邻接表</li><li>邻接多重表</li><li>十字链表</li></ul></li></ol><h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><ol><li><p>缓存调度算法</p><ul><li>先进先出（FIFO）</li><li>最近最少使用（LRU）</li><li>随机替换</li></ul></li><li><p>中断的过程</p><ul><li>关中断、保存断点（PC，PSW，程序堆栈，环境信息）、引出中断服务程序</li><li>保存现场和屏蔽字</li><li>开中断</li><li>执行中断服务程序</li><li>关中断</li><li>恢复现场和屏蔽字</li><li>开中断、中断返回</li></ul></li><li><p>中断向量</p><p>中断向量是中断处理程序的入口地址，存放在中断向量表中。</p></li><li><p>CPU和外设之间数据交换有哪些</p><ul><li>程序控制方式：用户进程直接控制内存或CPU和外围设备之间的信息传送，这种方式控制者都是用户进程。</li><li>中断方式：当输入设备将数据准备好后，才向CPU发送中断请求。CPU响应中断请求后暂停当前执行的程序，转去执行中断服务程序。</li><li>DMA方式：通过在IO设备和内存之间开辟一条可以直接传输数据的通路，采用DMA控制器来控制一个数据块的传输。在传输结束后需要CPU的介入。</li><li>通道方式：和DMA方式类似，CPU介入更少。</li></ul></li><li><p>南北桥芯片</p><p>位于计算机主板上的两个芯片组。</p><p>南桥（低速IO）控制着主板上所有的外围设备，如硬盘、USB、网卡等。</p><p>北桥（高速IO）负责高速缓存、内存控制器，是连接CPU和内存等高速组件的关键部分。</p><p>南北桥架构设计可以实现高效的数据传输和处理，使计算机系统更加稳定和可靠。现代计算机系统中，南桥和北桥芯片组已经融合在一起，成为了一个单一的芯片组。</p></li><li><p>cache和主存的映射方式</p><ul><li>直接映射：主存中的地址与cache中的地址一一对应。实现简单，查找快，容易出现冲突。</li><li>全相连映射：主存中的每一块都能映射到cache中的任意一块。命中率高，查找效率低。</li><li>组相连映射：主存中的每一块都能映射到cache某一组中的任意一块。结合了前两者的优点，减少了冲突，利用分块查找加快了查找效率。</li></ul></li><li><p>并行通信和串行通信</p><ul><li>发送数据数量不同：串行通信是指在单条物理线路上逐位传输数据，并行通信在同一时刻发送多位数据。</li><li>串行通信的优点是传输距离远，占用资源少，缺点是发送速度慢。</li><li>并行通信的优点是发送速度快，缺点是传输距离短，资源占用多。</li></ul></li><li><p>CISC和RISC</p><p><img src="C:\Users\kaka0320\AppData\Roaming\Typora\typora-user-images\image-20230315152847789.png" alt="image-20230315152847789"></p></li><li><p>Cache是什么，为什么要采用Cache，原理是什么</p><p>Cache是一种高速缓存，用于存储最近被访问过的数据，以便快速访问。</p><p>解决主存与CPU在速度上的矛盾。</p><p>Cache的原理是通过存储器层次结构实现，高速缓存位于最顶部，容量小但速度快，通常由SRAM实现。</p><p>下一级是主存，容量较大，速度相对较慢，通常由DRAM实现。</p></li></ol><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><ol><li><p>简述处理机管理</p><ul><li>进程控制：通过原语实现，包括进程创建、进程终止、进程阻塞、进程唤醒、进程切换</li><li>进程同步：通过信号量使得多个进程可以先后有序访问临界资源</li><li>进程通信：共享存储、消息传递、管道通信</li><li>死锁处理：资源剥夺法、撤销进程法、进程回退法</li><li>处理机调度：先来先服务、时间片轮转、短进程优先、优先级调度、高响应比优先</li></ul></li><li><p>分时操作系统和实时操作系统</p><ul><li>分时操作系统是指在多道程序环境下，采用时间片轮转技术，多个用户通过终端或网络等方式与计算机交互。常见的分时操作系统有windows，Linux</li><li>实时操作系统是指在实时环境下进行任务调度和管理的操作系统。实时操作系统要满足对任务响应时间的严格要求，以保证任务的实时性和可靠性。广泛应用于航空航天领域。</li></ul></li><li><p>进程和程序</p><ul><li>进程是动态的，程序是静止的。程序是代码的集合，进程是程序的执行。</li><li>进程是暂时的，程序是永久的。</li><li>进程包含程序、数据、进程控制块。</li><li>一个程序可以对应多个进程。</li></ul></li><li><p>进程和线程</p><ul><li>调度：线程是调度的基本单位，进程是资源分配的基本单位。</li><li>资源：线程不拥有资源，进程是拥有资源的基本单位。</li><li>系统开销：操作系统为进程付出的开销远大于创建线程的开销</li></ul></li></ol><h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><ol><li>C语言编译过程<ul><li>预编译：预处理器将预处理指令（#）处理掉，生成一个新的文本文件，其中包含宏替换、条件编译等信息。</li><li>编译：编译器将预处理后的源码翻译成汇编语言。</li><li>汇编：汇编器将汇编语言翻译成机器语言。</li><li>链接：连接器将目标文件和库文件等链接起来，生成可执行文件。</li></ul></li><li>编译过程包括哪些阶段<ul><li>词法分析</li><li>语法分析</li><li>语义分析</li><li>中间代码生成</li><li>代码优化</li><li>目标代码生成</li></ul></li><li>java、c++、c、python的区别<ul><li>编译上：c++和c是编译型语言，python是解释型语言，java既包含编译型语言的特征，又包含解释型语言的特征。</li><li>应用上：java适合于开发大型复杂的企业级应用程序；c++适合于系统级编程，游戏开发和高性能计算；c语言广泛应用于操作系统、编译器等领域；python适合于数据分析，人工智能领域。</li><li>java是面向对象的，c是面向过程的，c++和python既可以面向对象也可以面向过程。</li></ul></li><li>面向对象最大的优势是什么<ul><li>抽象：将实体抽象成对象。</li><li>封装：将数据和行为打包到一个单独的对象中，提高安全性和可维护性，暴露对外接口。</li><li>继承：允许程序员从已有的类中派生出新的类，可以重用已有的代码，减少工作量。</li><li>多态：同一个方法可以被不同的对象调用，产生不同的行为。</li></ul></li></ol><h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><ol><li><p>图形和图像的区别</p><p>图形是由几何曲线组成，矢量对象，不会失真</p><p>图像是由像素点组成，每个像素包含颜色信息，当图片被放大时容易出现失真的现象</p></li><li><p>图像正交变换</p><p>采用二维矩阵的初等变换找到同形矩阵，使得变换后的结果在不同频率或是时间上是相互正交的。这种正交性使得信号处理更加简单，实现信号的去噪，特征提取，压缩等操作。</p></li></ol><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ol><li><p>什么是事务</p><p>事务是数据库执行的一系列操作序列。在事务中，一组相关的数据库操作必须为一个原子操作执行，也就是说，要么所有操作都成功执行并将更改持久保存到数据库中，要么如果有任何一个操作失败，所有操作都会回滚，撤销之前的修改。</p><p>在数据库中，事务是确保数据完整性和一致性的重要机制。</p></li><li><p>SQL Sever中事务有哪三种语句</p><ol><li>BEGIN TRANSACTION：开始一个事务，并且把事务状态设置为进行中</li><li>COMMIT TRANSANCTION：提交一个事务，如果事务内的所有操作都完成，将事务永久保存到数据库中</li><li>ROLLBACK TRANSANCTION：回滚一个事务，如果事务内的任何一个操作失败，则回滚所有操作并且撤销对数据库的任何修改</li></ol></li><li><p>数据库并发机制是怎么实现的</p><ul><li>锁。锁是一种并发控制机制，用于限制对共享资源的访问。数据库中的锁包括共享锁和排他锁，共享锁允许多个用户同时读取数据，但不能修改 ，排他锁不允许其他用户访问数据。</li><li>事务。保证数据的一致性和完整性</li><li>死锁检测。</li><li>多版本并发控制（MVCC）。基于时间戳的并发控制机制，为每个数据库操作分配一个时间戳，可以保证不同操作之间不会互相干扰，从而实现高并发的数据库访问。</li></ul></li><li><p>数据库索引</p><ul><li>含义：索引是数据库中一种特殊的数据结构，用于快速查询和访问数据库表中的数据。常见的索引算法：二分查找、分块查找、B树、哈希散列法。</li><li>优点<ul><li>大大加快索引速度</li><li>创建唯一性索引，保证数据库表中每一行数据的唯一性</li><li>加速表与表之间的连接</li></ul></li><li>缺点<ul><li>索引需要占用数据表以外的物理存储空间</li><li>创建索引和维护索引要花费一定的时间</li><li>对表进行更新的时候，索引也需要相应的更新，降低了数据维护的速度</li></ul></li><li>类型<ul><li>唯一索引：每个索引值只对应唯一的数据记录</li><li>主键索引：一种特殊的唯一索引</li><li>聚集索引：决定了表中数据的物理存储顺序</li></ul></li></ul></li><li><p>主键和外键</p><p>主键用来唯一标识一组字段，主键字段必须具有唯一性且不能为空。</p><p>外键是与另一张表建立关联的字段，外键字段存储的是另一张表的主键值。外键的值必须存在于对应的主键中。</p></li><li><p>超键和候选键</p><ul><li>超键：在关系中能唯一标识元组的组合属性称为关系模式的超键。</li><li>候选键：是最小的超键。</li></ul></li><li><p>锁</p><p>从数据库系统角度</p><ol><li>共享锁：又称读锁，允许多个事务同时读取同一个资源，但不允许对该资源进行写操作，防止数据被并发修改。如Select操作。</li><li>排他锁：又称写锁，只允许一个事务独占一个资源进行写操作，防止其他事务同时读取和写入该资源。如Insert，Update，Delete操作。</li><li>更新锁：又称“非阻塞排他锁”，既允许读取操作，也允许更新操作，但不允许其他事务获取排他锁，防止多个事务同时进行更新操作导致数据不一致。</li></ol><p>从程序员角度</p><ol><li>悲观锁：在整个数据修改中上锁，其他需要该资源的线程被挂起，直到前面的线程执行完释放资源。</li><li>乐观锁：假设并不会发生冲突，只在提交的时候检查是否违反数据完整性。</li></ol></li><li><p>redis和couchbase的区别</p><ul><li>数据结构：redis支持字符串、列表、哈希表、集合等数据类型，而couchbase只支持json格式。</li><li>性能：redis只使用单核，而couchbase支持多核。因此在小数据方面redis有优势，在大数量级数据时，couchbase效率更高。</li><li>一致性：redis提供了事务功能，可以保证一串命令的原子性，而couchbase没有。</li><li>存储：redis中的数据全部保存在内存中，couchbase中的数据先被保存在内存中，然后再异步保存到硬盘中。</li></ul></li><li><p>delete和drop、truncate的区别</p><ul><li>delete、truncate用于删除数据表中的数据，truncate删所有数据，delete删部分行。</li><li>drop用于删除表的结构，如删掉一列或整张表。</li></ul></li><li><p>ACID特征</p></li></ol><ul><li>原子性：事务被视为不可分割的最小原子，事务的所有操作要么都成功，要么全部失败回滚。</li><li>一致性：数据库在事务执行前后都保持一致性状态。所有事务对数据的读取都是一致的。</li><li>隔离性：一个事务所做的修改在提交之前，对其他事务都是不可见的。</li><li>持久性：一旦事务提交，所做的修改会永久保存到数据库中。</li></ul><ol start="11"><li><p>数据库范式</p><ul><li>第一范式：一个表中的属性如果不能拆分成多个就说明这个表符合第一范式。</li><li>第二范式：在第一范式的基础上，每个非主属性完全依赖于任何一个候选码。</li><li>第三范式：不存在非主属性对候选码存在部分函数依赖或传递函数依赖。</li></ul></li><li><p>关系模型完整性约束</p><ul><li>实体完整性：每个表必须有一个主键，且主键值不能为空。</li><li>参照完整性：外键必须参照另一个表的主键。</li><li>用户定义完整性：根据用户需要定义一些约束条件。</li></ul></li><li><p>数据库隔离等级</p><ul><li>读未提交：允许一个事务读取另一个未提交的数据。</li><li>读提交：一个事务要等另一个事务提交后才能读取数据。</li><li>重复读：开始读数据时，可以并发读取，但不能修改。</li><li>串行化：串行化执行。</li></ul></li><li><p>存储过程</p><p>​    是大型数据库系统中，一组为了完成特定功能的SQL语句集。是一些预编译的SQL语句，执行效率比较高。</p></li><li><p>游标</p><p>系统为用户开设的一个数据缓冲区，存放SQL执行语句的结果。</p></li><li><p>ER图</p><ul><li>1：1</li><li>n：1</li><li>n：m</li></ul></li></ol><h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><ol><li><p>内组件、外组件</p><ul><li>内组件：在软件内部运行并提供服务的组件，包括库、模块、类、函数。</li><li>外组件：与软件外部系统或用户进行交互的组件，例如用户界面、Web服务或外部数据源等。外组件通常提供一些接口或API，允许外部系统或用户与它们进行交互并使用其功能。</li></ul></li><li><p>模块是什么</p><p>是一个独立的代码单元，可以包含变量、函数、类等，用于实现一个特定的功能，可以被其他程序或模块调用，以提供相应的功能。</p><ul><li>独立性</li><li>封装性</li><li>可重用性</li><li>可拓展性</li><li>可测试性</li></ul></li><li><p>模块间耦合度</p><p>模块之间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系</p><p>模块之间的联系越多，其耦合度越强，同时表明其独立性越差</p></li><li><p>区分模块的要素是什么</p><p>功能、逻辑、状态</p></li><li><p>瀑布模型</p><p>包括需求分析、设计、编码、测试、运行与维护</p><p>瀑布模型强调每个阶段的顺序和相互依赖关系，必须在上一个阶段完成后才能进入下一个阶段。这种线性的开发方式能够确保软件开发过程的可控性和可预测性。以文档为驱动，适合于软件需求明确的软件项目。</p></li><li><p>增量模型</p><p>融合了瀑布模型的基本成分和原型实现的迭代特征，它假设可以将需求分段为一系列增量产品，每一增量产品可以分别开发。</p><p>第一个增量往往是核心的产品，客户对每个增量的使用和评估都作为下一个增量发布的新特征和功能，这个过程在每个增量发布后不断重复，直到产生了最终的完善产品。</p></li><li><p>喷泉模型</p><p>包括分析、设计、实现、维护、演化</p><p>喷泉模型是一种相对于传统的瀑布模型而言更加灵活的软件开发过程模型。它以用户需求为动力，以对象作为驱动的模型，适合于面向对象的开发。克服了瀑布模型的局限性，使得开发过程具有迭代性和无间隙性。</p></li><li><p>CMM模型</p><p>是一种软件开发能力评估模型，全称Capability Maturity Model，即能力成熟度模型。将软件开发能力分为五个不同的等级。是软件开发过程的评判标准。</p></li><li><p>黑盒白盒</p><ul><li>白盒：结构测试，用于检测软件编码过程中的错误。</li><li>黑盒：功能测试，主要检测软件的每一个功能是否能够正常使用。在测试过程中，将程序看成不能打开的黑盒子，只通过接口测试，检查程序功能是否按照说明书的规定能够正常打开。</li></ul></li><li><p>程序和软件的区别</p></li></ol><p>   程序是一系列代码或指令的集合，它是实现软件部分功能的代码。</p><p>   软件是一个更加广泛的概念，它包括程序、数据、文档等多种元素。可以被安装到计算机上，并根据需要进行更新和升级。</p>]]></content>
      
      
      <categories>
          
          <category> 复试资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 软件工程 </tag>
            
            <tag> 编译原理 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot】Spring Security框架</title>
      <link href="/2023/02/14/%E3%80%90SpringBoot%E3%80%91Spring-Security%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/02/14/%E3%80%90SpringBoot%E3%80%91Spring-Security%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring Security是Spring家族中的一个安全管理框架。相比于另外一个安全框架Shiro，他提供更丰富的功能，社区资源也比Shiro丰富。</p><p>一般来说中大型的项目都是使用SpringSecurity来做安全框架。小项目用Shiro的比较多，相比于SpringSecurity，Shiro的上手更加简单。</p><p>一般Web应用需要进行认证和授权。</p><p><strong>认证</strong>：验证当前访问系统的是不是本系统的用户，并且要具体确认是哪个用户。</p><p><strong>授权</strong>：经过认证后判断当前用户是否有权限进行某个操作。</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--security--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖后我们在尝试访问之前的接口就会自动跳转到一个SpringSecurity的默认登录页面，默认用户名是user，密码会输出在控制台。</p><h1 id="登录校验流程"><a href="#登录校验流程" class="headerlink" title="登录校验流程"></a>登录校验流程</h1><ul><li>前端携带用户名、密码访问登录接口</li><li>与数据库中信息进行比较</li><li>如果正确，生成JWT，并返回前端</li><li>之后的请求中前端需要携带token，后端解析token响应请求</li></ul><h1 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h1><p>SpringSecurity实际上就是一个过滤器链，内部包含了提供各种功能的过滤器。</p><ul><li><strong>UsernamePasswordAuthenticationFilter</strong>：负责处理登录请求。</li><li><strong>ExceptionTranslationFilter</strong>：处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException。</li><li><strong>FilterSecurityInterceptor</strong>：负责权限校验的过滤器。</li></ul><h1 id="相关准备"><a href="#相关准备" class="headerlink" title="相关准备"></a>相关准备</h1><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--fastjson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jwt依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加redis相关配置"><a href="#添加redis相关配置" class="headerlink" title="添加redis相关配置"></a>添加redis相关配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.type.TypeFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis使用FastJson序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span> || bytes.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = <span class="keyword">new</span> String(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JavaType <span class="title">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.FastJsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 避免出现乱码的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        FastJsonRedisSerializer serializer = <span class="keyword">new</span> FastJsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应类"><a href="#响应类" class="headerlink" title="响应类"></a>响应类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//状态码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">//查询到的结果数据</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有效期为</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long JWT_TTL = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>;<span class="comment">// 60 * 60 *1000  一个小时</span></span><br><span class="line">    <span class="comment">//设置秘钥明文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JWT_KEY = <span class="string">&quot;sangeng&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String token = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, <span class="keyword">null</span>, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject   token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis token超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> </span>&#123;</span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> </span>&#123;</span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line">        SecretKey secretKey = generalKey();</span><br><span class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> expMillis = nowMillis + ttlMillis;</span><br><span class="line">        Date expDate = <span class="keyword">new</span> Date(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)              <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject)   <span class="comment">// 主题  可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;sg&quot;</span>)     <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now)      <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> </span>&#123;</span><br><span class="line">        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, id);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&quot;</span>;</span><br><span class="line">        Claims claims = parseJWT(token);</span><br><span class="line">        System.out.println(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title">generalKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        SecretKey key = <span class="keyword">new</span> SecretKeySpec(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SecretKey secretKey = generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">long</span> <span class="title">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="keyword">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">BoundSetOperations&lt;String, T&gt; <span class="title">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Set&lt;T&gt; <span class="title">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HashOperations hashOperations = redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderString</span><span class="params">(HttpServletResponse response, String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h1><p>相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sys?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">xxxxxxx</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">xxxxxxx</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mybatis/*.xml</span></span><br></pre></td></tr></table></figure><h1 id="重写登录流程"><a href="#重写登录流程" class="headerlink" title="重写登录流程"></a>重写登录流程</h1><h2 id="重写UserDetailsService"><a href="#重写UserDetailsService" class="headerlink" title="重写UserDetailsService"></a>重写UserDetailsService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kaka.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.kaka.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kaka.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询用户信息</span></span><br><span class="line">        User user = userMapper.listUserByName(username);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user)) &#123; <span class="comment">// 查询不到</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 查询对应的权限信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把数据封装成UserDetails返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重写UserDetails类"><a href="#重写UserDetails类" class="headerlink" title="重写UserDetails类"></a>重写UserDetails类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.entity;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="用户密码加密"><a href="#用户密码加密" class="headerlink" title="用户密码加密"></a>用户密码加密</h1><p>编写config类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建BCrptPasswordEncoder注入容器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个函数</p><ul><li>passwordEncoder.encode(string s)  ：将s加密</li><li>passwordEncoder.matches(string s1, string s2) ：将加密过的s1与原密码s2进行对比</li></ul><h1 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h1><p>自定义登录接口，让SpringSecurity对这个接口放行，让用户访问这个接口的时候不用登录也能访问。</p><p>在接口中通过AuthenticationManager的authenticate方法来进行用户认证，所以需要在SecurityConfig中配置把AuthenticationManger注入容器中。</p><p>编写登录接口业务（生成token并返回，将用户信息存入redis中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kaka.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.kaka.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//AuthenticationManager authenticate进行用户认证</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword());</span><br><span class="line">        Authentication authentication = authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="comment">//如果认证没通过，给出提示</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(authentication)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果认证通过，使用userid生成jwt</span></span><br><span class="line">        LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        String userid = loginUser.getUser().getId().toString();</span><br><span class="line">        String jwt = JwtUtil.createJWT(userid);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, jwt);</span><br><span class="line">        <span class="comment">// 把用户信息写入redis中</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userid, loginUser);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>, <span class="string">&quot;登录成功&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建BCrptPasswordEncoder注入容器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放行登录接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//对于登录接口允许匿名访问（未认证可访问）</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/api/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">//除上面外所有请求都需要鉴权认证</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">xxxxxxxxx</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">xxxxxxx</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="token认证过滤器"><a href="#token认证过滤器" class="headerlink" title="token认证过滤器"></a>token认证过滤器</h1><p>所有请求都会经过认证过滤器。</p><p>如果不含有token的请求直接放行。</p><p>如果含有token，解析并判断token是否正确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kaka.entity.LoginUser;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.RedisCache;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.kaka.utils.JwtUtil.parseJWT;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Claims claims = parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;tolen非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从redis中获取用户信息</span></span><br><span class="line">        String redisKey = <span class="string">&quot;login:&quot;</span> + userid;</span><br><span class="line">        LoginUser loginUser = redisCache.getCacheObject(redisKey);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(loginUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入SecurityContextHolder</span></span><br><span class="line">        <span class="comment">// TODO 获取权限信息封装到Authentication中</span></span><br><span class="line">        UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginUser,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h2><p>将其添加在<strong>UsernamePasswordAuthenticationFilter</strong>的后面，即在登录认证之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">        <span class="comment">//将过滤器添加到过滤器链的最前面</span></span><br><span class="line">        .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure><h1 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h1><p>不需要删除contextHolder中的用户信息，只需要删除redis中的用户信息即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseResult <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取SecurityContextHolder中的用户id</span></span><br><span class="line">    UsernamePasswordAuthenticationToken authentication = (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    LoginUser loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">    Long userid = loginUser.getUser().getId();</span><br><span class="line">    <span class="comment">//删除redis中的值</span></span><br><span class="line">    redisCache.deleteObject(<span class="string">&quot;login:&quot;</span>+userid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="number">200</span>, <span class="string">&quot;注销成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在Filter中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>在项目中只需要把当前登录用户的权限信息页存入Authentication，然后设置资源所需要的权限。</p><h2 id="授权实现"><a href="#授权实现" class="headerlink" title="授权实现"></a>授权实现</h2><p>使用注解去指定访问对应的资源所需的权限。</p><p>先开启相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnable = true)</span></span><br></pre></td></tr></table></figure><p>然后使用对应的注解。@PreAuthorize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;xxxx&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>springboot跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 允许跨域时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringSecurity跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.cors();</span><br></pre></td></tr></table></figure><h1 id="自定义失败处理器"><a href="#自定义失败处理器" class="headerlink" title="自定义失败处理器"></a>自定义失败处理器</h1><p>认证失败处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">          <span class="comment">// 处理异常</span></span><br><span class="line">        ResponseResult result = <span class="keyword">new</span> ResponseResult(HttpStatus.UNAUTHORIZED.value(), <span class="string">&quot;用户名密码不正确&quot;</span>);</span><br><span class="line">        String json = JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response, json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>授权失败处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaka.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> com.kaka.utils.WebUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 处理异常</span></span><br><span class="line">        ResponseResult result = <span class="keyword">new</span> ResponseResult(HttpStatus.FORBIDDEN.value(), <span class="string">&quot;您的权限不足&quot;</span>);</span><br><span class="line">        String json = JSON.toJSONString(result);</span><br><span class="line">        WebUtils.renderString(response, json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加到配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling()</span><br><span class="line">        <span class="comment">//配置认证失败处理器</span></span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">        <span class="comment">//配置授权失败处理器</span></span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vue】前端登录请求</title>
      <link href="/2023/02/14/%E3%80%90vue%E3%80%91%E5%89%8D%E7%AB%AF%E7%99%BB%E5%BD%95%E8%AF%B7%E6%B1%82/"/>
      <url>/2023/02/14/%E3%80%90vue%E3%80%91%E5%89%8D%E7%AB%AF%E7%99%BB%E5%BD%95%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p><img src="https://img-blog.csdnimg.cn/172a07479dc24b7d9549681b0f6ae25a.png#pic_center" alt="img"></p><h1 id="api统一管理"><a href="#api统一管理" class="headerlink" title="api统一管理"></a>api统一管理</h1><p>在api/index.js中编写登录请求</p><p>所有的请求都写在这个文件中，以方便api统一管理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登陆</span></span><br><span class="line"><span class="comment">//url:/api/user/login  method:post  username  password </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reqUserLogin = <span class="function">(<span class="params">data</span>)=&gt;</span>requests(&#123;<span class="attr">url</span>:<span class="string">&#x27;/user/login&#x27;</span>,data,<span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>&#125;); </span><br></pre></td></tr></table></figure><p>在login.vue中实现简单的登录操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;username,password&#125; = <span class="built_in">this</span>;</span><br><span class="line">            (username&amp;&amp;password)&amp;&amp;<span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;userLogin&#x27;</span>,&#123;username,password&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在user模块中实现登录请求和回调函数获取token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reqUserLogin&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state=&#123;</span><br><span class="line">    <span class="attr">token</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">USERLOGIN</span>(<span class="params">state, token</span>)</span> &#123;</span><br><span class="line">        state.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//登录业务</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">userLogin</span>(<span class="params">&#123;commit&#125;, obj</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> reqUserLogin(obj);</span><br><span class="line">        <span class="built_in">console</span>.log(data.msg);</span><br><span class="line">        <span class="keyword">if</span> (data.code == <span class="number">200</span>) &#123;</span><br><span class="line">            commit(<span class="string">&quot;USERLOGIN&quot;</span>, data.msg);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;failure&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之后的请求中可以带上token去获取用户信息，实现安全原则。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vue】Vuex及应用</title>
      <link href="/2023/02/11/%E3%80%90vue%E3%80%91vuex%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2023/02/11/%E3%80%90vue%E3%80%91vuex%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>vuex是专门管理vue.js应用程序中状态的一个插件。他的作用是将应用中的所有状态放在一起集中管理。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4ce41276949404e3b3fec5a021b2e239.png" alt="img"></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>vuex中最关键的是store对象，并且每个vue应用只对应一个store对象。</p><p>一个完整的store结构包含以下</p><ul><li><p>state  存放状态</p></li><li><p>mutations  更改state中的状态逻辑，同步操作</p></li><li><p>actions  提交mutation，异步操作</p></li><li><p>getters  state的计算属性</p></li></ul><p>对于store，有两点需要记住：</p><ol><li>store中存储的状态是响应式的，当组件从store中读取状态时，如果store中的状态发生了改变，那么响应的组件也会得到更新</li><li>不能直接改变store中的状态。改变store的唯一途径是提交(commit)mutations。这样使得我们可以方便地跟踪每一个状态变化</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>vue2的版本需要安装vuex3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex@3 --save</span><br></pre></td></tr></table></figure><p>vue3的版本需要安装vuex4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex@4 --save</span><br></pre></td></tr></table></figure><h1 id="模块式开发"><a href="#模块式开发" class="headerlink" title="模块式开发"></a>模块式开发</h1><p>在main.js中引入store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router,</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在src下创建一个store文件夹，新建index.js</p><p>并在store分别创建文件夹，每个文件夹就是一个小仓库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入小仓库</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;./home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">&#x27;./search&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对外暴露Store类的一个实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">//实现Vuex仓库模块式开发存储数据</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        home,</span><br><span class="line">        search,</span><br><span class="line">        user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vue】axios组件</title>
      <link href="/2023/02/11/%E3%80%90vue%E3%80%91axios%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/02/11/%E3%80%90vue%E3%80%91axios%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure><h1 id="对axios进行二次封装"><a href="#对axios进行二次封装" class="headerlink" title="对axios进行二次封装"></a>对axios进行二次封装</h1><p>新建文件夹api，新建文件request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用axios对象的方法create，去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.create(&#123;</span><br><span class="line">    <span class="comment">//配置对象</span></span><br><span class="line">    <span class="comment">//基础路径，发请求的时候，路径中会出现api</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">    <span class="comment">//请求超时的时间</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情</span></span><br><span class="line">requests.interceptors.request.use(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//config: 配置对象，对象里有一个属性很重要，headers请求头</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">requests.interceptors.response.use(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//成功的回调函数：服务器响应数据回来之后，响应拦截器可以检测到，可以做一些事情</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//响应失败的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;failure&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests;<span class="comment">//对外暴露requests</span></span><br></pre></td></tr></table></figure><h1 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h1><p>在vue.config.js中配置代理跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//代理跨域</span></span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nprogress进度条的使用"><a href="#nprogress进度条的使用" class="headerlink" title="nprogress进度条的使用"></a>nprogress进度条的使用</h1><ul><li><p>安装nprogress</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save nprogress</span><br></pre></td></tr></table></figure></li><li><p>在request.js中进行引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&quot;nprogress&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;nprogress/nprogress.css&quot;</span></span><br><span class="line"><span class="comment">//利用axios对象的方法create，去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.create(&#123;</span><br><span class="line">    <span class="comment">//配置对象</span></span><br><span class="line">    <span class="comment">//基础路径，发请求的时候，路径中会出现api</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>,</span><br><span class="line">    <span class="comment">//请求超时的时间</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情</span></span><br><span class="line">requests.interceptors.request.use(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//config: 配置对象，对象里有一个属性很重要，headers请求头</span></span><br><span class="line">    nprogress.start();<span class="comment">//进度条启动</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">requests.interceptors.response.use(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//成功的回调函数：服务器响应数据回来之后，响应拦截器可以检测到，可以做一些事情</span></span><br><span class="line">    nprogress.done();<span class="comment">//进度条结束</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//响应失败的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;failure&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests;</span><br></pre></td></tr></table></figure></li><li><p>还可以在css中自行更改颜色等样式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【vue】路由组件</title>
      <link href="/2023/02/09/%E3%80%90vue%E3%80%91%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/02/09/%E3%80%90vue%E3%80%91%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h1><ul><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3.5.2 --save</span><br></pre></td></tr></table></figure></li><li><p>在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>新建一个router文件夹，新建index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter (&#123;</span><br><span class="line">    <span class="comment">//配置路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: 路径名</span><br><span class="line">            <span class="attr">component</span>: 组件名</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="隐藏路由组件"><a href="#隐藏路由组件" class="headerlink" title="隐藏路由组件"></a>隐藏路由组件</h1><p>在某些页面中如果想要隐藏Header组件或Footer组件，可以设置meta</p><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter (&#123;</span><br><span class="line">    <span class="comment">//配置路由</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: Home,</span><br><span class="line">            <span class="attr">meta</span>: &#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: Login,</span><br><span class="line">            <span class="attr">meta</span>: &#123;<span class="attr">show</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: Register,</span><br><span class="line">            <span class="attr">meta</span>: &#123;<span class="attr">show</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Footer v-show=&quot;$route.meta.show&quot;&gt;&lt;/Footer&gt;</span><br></pre></td></tr></table></figure><h1 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h1><ol><li><p>声明式导航router-link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>编程式导航push | replace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;goSearch&quot;&gt;搜索&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">goSearch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/search&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h1><p>在编程式导航中可以进行路由传参</p><ol><li><p>字符串形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// 修改路由信息</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search/:keywords&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Search,</span><br><span class="line">    <span class="attr">meta</span>: &#123;<span class="attr">show</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编程式导航</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;/search/&#x27;</span>+<span class="built_in">this</span>.keywords+<span class="string">&quot;?k=&quot;</span>+<span class="built_in">this</span>.keywords.toUpperCase());</span><br></pre></td></tr></table></figure><p>url地址：<a href="http://localhost:8081/#/search/1a2q?k=1A2Q">http://localhost:8081/#/search/1a2q?k=1A2Q</a></p><p>其中params参数为1a2q，query参数为1A2Q</p><p>可以通过$route.params.keywords 和 $route.query.k获取</p></li><li><p>模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">`/search/<span class="subst">$&#123;<span class="built_in">this</span>.keywords&#125;</span>?k=<span class="subst">$&#123;<span class="built_in">this</span>.keywords.toUpperCase()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li><li><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;search&quot;</span>,</span><br><span class="line">            <span class="attr">params</span>: &#123;<span class="attr">keywords</span>:<span class="built_in">this</span>.keywords&#125;,</span><br><span class="line">            <span class="attr">query</span>:&#123;<span class="attr">k</span>:<span class="built_in">this</span>.keywords.toUpperCase()&#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 路由 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket</title>
      <link href="/2023/02/08/socket/"/>
      <url>/2023/02/08/socket/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>所谓socket（套接字），就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。</p><p>套接字通信分成两个部分：</p><ul><li>服务器端：被动连接</li><li>客户端：主动向服务器端发起连接</li></ul><p>socket是一套通信的接口，Linux和Windows都有</p><h1 id="Socket地址"><a href="#Socket地址" class="headerlink" title="Socket地址"></a>Socket地址</h1><p>socket地址实际上是一个结构体，封装端口号和IP等信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/socket.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">sockaddr</span> &#123;</span> <span class="comment">//通用socket地址</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sa_family;</span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="keyword">sa_family_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span> <span class="comment">//ipv4专用地址</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family;</span><br><span class="line">    <span class="keyword">in_port_t</span> sin_port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">in_addr_t</span> s_addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h1><p><img src="image-20230208125145685.png" alt="image-20230208125145685"></p><h1 id="套接字函数"><a href="#套接字函数" class="headerlink" title="套接字函数"></a>套接字函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 功能: 创建一个套接字</span></span><br><span class="line"><span class="comment">- 参数:</span></span><br><span class="line"><span class="comment">- domain: 协议族</span></span><br><span class="line"><span class="comment">- AF_INET: ipv4</span></span><br><span class="line"><span class="comment">- AF_INET6: ipv6</span></span><br><span class="line"><span class="comment">        - AF_UNIX, AF_LOCAL: 本地套接字通信</span></span><br><span class="line"><span class="comment">    - type: 通信过程中使用的协议类型</span></span><br><span class="line"><span class="comment">    - SOCK_STREAM: 流式协议</span></span><br><span class="line"><span class="comment">    - SOCK_DGRAM: 报式协议</span></span><br><span class="line"><span class="comment">    - protocol: 具体的一个协议，一般写0</span></span><br><span class="line"><span class="comment">    - 流式协议默认会用TCP</span></span><br><span class="line"><span class="comment">    - 报式协议默认使用UDP</span></span><br><span class="line"><span class="comment">    - 返回值: </span></span><br><span class="line"><span class="comment">    - 成功: 返回文件描述符，操作的就是内核缓冲区</span></span><br><span class="line"><span class="comment">    - 失败: -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 功能: 绑定，将fd和本地的IP+端口进行绑定</span></span><br><span class="line"><span class="comment">- 参数:</span></span><br><span class="line"><span class="comment">- sockfd: 通过socket函数得到的文件描述符</span></span><br><span class="line"><span class="comment">    - addr: 需要绑定socket地址，这个地址封装了IP和端口号信息</span></span><br><span class="line"><span class="comment">    - addrlen: 第二个参数结构体占内存大小</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 功能: 监听这个socket上的连接</span></span><br><span class="line"><span class="comment">- 参数:</span></span><br><span class="line"><span class="comment">- sockfd: 通过socket()函数得到的文件描述符</span></span><br><span class="line"><span class="comment">- backlog: 未连接的和已连接的和的最大值，5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 功能: 接受客户端连接，默认是一个阻塞的函数，阻塞等待客户端连接</span></span><br><span class="line"><span class="comment">- 参数:</span></span><br><span class="line"><span class="comment">- sockfd: 通过socket()函数得到的文件描述符</span></span><br><span class="line"><span class="comment">- addr: 传出参数，记录了连接成功后客户端的地址信息(ip,port)</span></span><br><span class="line"><span class="comment">- addrlen: 指定第二个参数对应的内存大小</span></span><br><span class="line"><span class="comment">- 返回值: </span></span><br><span class="line"><span class="comment">- 成功: 用于通信的的文件描述符</span></span><br><span class="line"><span class="comment">- 失败: -1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 功能: 客户端连接服务器</span></span><br><span class="line"><span class="comment">- 参数:</span></span><br><span class="line"><span class="comment">- sockfd: 用于通信的文件描述符</span></span><br><span class="line"><span class="comment">- addr: 客户端要连接的服务器的地址信息</span></span><br><span class="line"><span class="comment">- addrlen: 指定第二个参数对应的内存大小</span></span><br><span class="line"><span class="comment">- 返回值: </span></span><br><span class="line"><span class="comment">- 成功: 0</span></span><br><span class="line"><span class="comment">- 失败: -1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;<span class="comment">// 写数据</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;<span class="comment">// 读数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自用】hexo博客发布文章</title>
      <link href="/2023/02/06/%E3%80%90%E8%87%AA%E7%94%A8%E3%80%91hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/06/%E3%80%90%E8%87%AA%E7%94%A8%E3%80%91hexo%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 文件名</span><br></pre></td></tr></table></figure><p>生成的文件会位于source/_posts文件夹中</p><h2 id="设置标签归类"><a href="#设置标签归类" class="headerlink" title="设置标签归类"></a>设置标签归类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 标签名1</span><br><span class="line">- 标签名2</span><br><span class="line">....</span><br><span class="line">categories:</span><br><span class="line">- 一级分类</span><br><span class="line">- 二级分类</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="启动本地项目"><a href="#启动本地项目" class="headerlink" title="启动本地项目"></a>启动本地项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="发布修改"><a href="#发布修改" class="headerlink" title="发布修改"></a>发布修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo d</span><br></pre></td></tr></table></figure><p>hexo g：用于生成静态文件</p><p>hexo d：部署到github上</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 发布文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 235</title>
      <link href="/2022/01/18/AtCoder-Beginner-Contest-235/"/>
      <url>/2022/01/18/AtCoder-Beginner-Contest-235/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Rotate"><a href="#A-Rotate" class="headerlink" title="A - Rotate"></a>A - Rotate</h1><p>按照题目指示做</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">char</span> a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">int</span> x1 = a-<span class="string">&#x27;0&#x27;</span>, x2 = b-<span class="string">&#x27;0&#x27;</span>, x3 = c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; x1*<span class="number">100</span>+x2*<span class="number">10</span>+x3 + x2*<span class="number">100</span>+x3*<span class="number">10</span>+x1 + x3*<span class="number">100</span>+x1*<span class="number">10</span>+x2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Climbing-Takahashi"><a href="#B-Climbing-Takahashi" class="headerlink" title="B - Climbing Takahashi"></a>B - Climbing Takahashi</h1><p>找到一直递增的尽头</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> now = a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            now = a[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; now &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-The-Kth-Time-Query"><a href="#C-The-Kth-Time-Query" class="headerlink" title="C - The Kth Time Query"></a>C - The Kth Time Query</h1><p>寻找x在数列中第k次出现，用map存一下然后O(1)找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n, q; cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        mp[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, k; cin &gt;&gt; x &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; mp[x].<span class="built_in">size</span>()) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; mp[x][k<span class="number">-1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Multiply-and-Rotate"><a href="#D-Multiply-and-Rotate" class="headerlink" title="D - Multiply and Rotate"></a>D - Multiply and Rotate</h1><p>用bfs暴力找一下就可以了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> now, step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    base[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) base[i] = base[i<span class="number">-1</span>] * <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> a, n; cin &gt;&gt; a &gt;&gt; n;</span><br><span class="line">    queue&lt;node&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (que.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        node now = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (now.now == n) &#123;</span><br><span class="line">            cout &lt;&lt; now.step &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (vis[now.now]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[now.now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1ll</span>*now.now*a&lt;=<span class="number">3e6</span> &amp;&amp; !vis[now.now*a]) que.<span class="built_in">push</span>(&#123;now.now*a, now.step+<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span> (now.now % <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = now.now;</span><br><span class="line">        <span class="keyword">int</span> dig = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">            dig++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ttmp = now.now%<span class="number">10</span>*base[dig<span class="number">-1</span>] + now.now/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (ttmp&lt;=<span class="number">3e6</span> &amp;&amp; !vis[ttmp]) que.<span class="built_in">push</span>(&#123;ttmp, now.step+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-MST-1"><a href="#E-MST-1" class="headerlink" title="E - MST + 1"></a>E - MST + 1</h1><p>最小生成树问题，考虑离线处理，将询问全部丢到边集里面，在构建最小生成树时check一下是否在树内</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> state, u, v, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; rhs.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> fa[N], ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m, q; cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">        e[i].state = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m+<span class="number">1</span>; i &lt;= m+q; i++) &#123;</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">        e[i].state = i - m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m+q; i++) fa[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(e+<span class="number">1</span>, e+m+q+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">find</span>(e[i].u);</span><br><span class="line">        <span class="keyword">int</span> v = <span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!e[i].state) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                fa[u] = v;</span><br><span class="line">                <span class="keyword">if</span> (count == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[e[i].state] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i]) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="F-Variety-of-Digits"><a href="#F-Variety-of-Digits" class="headerlink" title="F - Variety of Digits"></a>F - Variety of Digits</h1><p>简单的数位DP，记$dp[pos][state]$为当前在pos位且取到数字的状压表示为state的个数，$dp2[pos][state]$为和</p><p>在数位DP中分类讨论一下，如果是前导0，那么不会记录state中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pii;</span><br><span class="line">ll dp[<span class="number">10005</span>][<span class="number">2048</span>];</span><br><span class="line">ll dp2[<span class="number">10005</span>][<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>], st;</span><br><span class="line">ll base[<span class="number">10005</span>];</span><br><span class="line"><span class="function">pii <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> state, <span class="keyword">bool</span> limit, <span class="keyword">bool</span> lead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((state &amp; st) == st) <span class="keyword">return</span> &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limit &amp;&amp; !lead &amp;&amp; dp[pos][state] != <span class="number">-1</span>) <span class="keyword">return</span> &#123;dp[pos][state], dp2[pos][state]&#125;;</span><br><span class="line">    <span class="keyword">int</span> End = limit ? a[pos] : <span class="number">9</span>;</span><br><span class="line">    ll ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= End; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lead) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                pii tmp = <span class="built_in">dfs</span>(pos<span class="number">-1</span>, state, limit &amp;&amp; i == End, <span class="number">1</span>);</span><br><span class="line">                ans1 = (ans1 + tmp.first) % mod;</span><br><span class="line">                ans2 = (ans2 + i * base[pos] % mod * tmp.first % mod + tmp.second) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pii tmp = <span class="built_in">dfs</span>(pos<span class="number">-1</span>, state | (<span class="number">1</span>&lt;&lt;i), limit &amp;&amp; i == End, <span class="number">0</span>);</span><br><span class="line">                ans1 = (ans1 + tmp.first) % mod;</span><br><span class="line">                ans2 = (ans2 + i * base[pos] % mod * tmp.first % mod + tmp.second) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pii tmp = <span class="built_in">dfs</span>(pos<span class="number">-1</span>, state | (<span class="number">1</span> &lt;&lt; i), limit &amp;&amp; i == End, <span class="number">0</span>);</span><br><span class="line">            ans1 = (ans1 + tmp.first) % mod;</span><br><span class="line">            ans2 = (ans2 + i * base[pos] % mod * tmp.first % mod + tmp.second) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limit &amp;&amp; !lead) dp[pos][state] = ans1, dp2[pos][state] = ans2;</span><br><span class="line">    <span class="keyword">return</span> &#123;ans1, ans2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    base[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) base[i] = base[i<span class="number">-1</span>] * <span class="number">10</span> % mod;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x; cin &gt;&gt; x;</span><br><span class="line">        st |= <span class="number">1</span> &lt;&lt; x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) a[i] = s[len<span class="number">-1</span>-i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="built_in">memset</span>(dp2, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp2);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(len<span class="number">-1</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">true</span>).second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Atcoder日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atcoder日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 764 (Div. 3)</title>
      <link href="/2022/01/11/Codeforces-Round-764-Div-3/"/>
      <url>/2022/01/11/Codeforces-Round-764-Div-3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Plus-One-on-the-Subset"><a href="#A-Plus-One-on-the-Subset" class="headerlink" title="A - Plus One on the Subset"></a>A - Plus One on the Subset</h1><p>最大最小值之差</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _; <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> ma = <span class="number">0</span>, mi =<span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            ma = <span class="built_in">max</span>(ma, a[i]);</span><br><span class="line">            mi = <span class="built_in">min</span>(mi, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ma - mi &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Make-AP"><a href="#B-Make-AP" class="headerlink" title="B - Make AP"></a>B - Make AP</h1><p>要求a、b、c为等差数列，因为只改动一个数，因此固定两个数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _; <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        ll a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        ll d = b - a;</span><br><span class="line">        <span class="keyword">if</span> ((b + d) % c == <span class="number">0</span> &amp;&amp; (b+d &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d = c - b;</span><br><span class="line">        <span class="keyword">if</span> ((b-d)%a==<span class="number">0</span> &amp;&amp; (b-d &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d = c - a;</span><br><span class="line">        <span class="keyword">if</span> (d % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((c-d/<span class="number">2</span>)%b==<span class="number">0</span> &amp;&amp; (c-d/<span class="number">2</span> &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Division-by-Two-and-Permutation"><a href="#C-Division-by-Two-and-Permutation" class="headerlink" title="C - Division by Two and Permutation"></a>C - Division by Two and Permutation</h1><p>数据范围很小，直接上二分图最大匹配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> match[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            vis[v] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!match[v] || <span class="built_in">dfs</span>(match[v])) &#123;</span><br><span class="line">                match[v] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _; <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="keyword">sizeof</span> match);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = a[i];</span><br><span class="line">            <span class="keyword">while</span> (now) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt;= n) g[i].<span class="built_in">push_back</span>(now);</span><br><span class="line">                now /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i)) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (num == n) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Palindromes-Coloring"><a href="#D-Palindromes-Coloring" class="headerlink" title="D - Palindromes Coloring"></a>D - Palindromes Coloring</h1><p>主要思想就是先放两两相同的，因为求的是最小值，因此最后一层如果两两没铺满就先不放了，全部转化为1去放</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _; <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k; cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            cnt[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; odd, even;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">len</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; cnt[i] &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">while</span> (cnt[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                cnt[i] -= <span class="number">2</span>;</span><br><span class="line">                len[idx] += <span class="number">2</span>;</span><br><span class="line">                idx++;</span><br><span class="line">                <span class="keyword">if</span> (idx == k + <span class="number">1</span>) &#123;</span><br><span class="line">                    idx = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, ma = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            ma = <span class="built_in">max</span>(ma, len[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len[i] == ma) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans != k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (len[i] == ma) &#123;</span><br><span class="line">                    num += <span class="number">2</span>;</span><br><span class="line">                    len[i] -= <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[i]) num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num) &#123;</span><br><span class="line">                len[i]++;</span><br><span class="line">                num--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mi = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            mi = <span class="built_in">min</span>(mi, len[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(mi, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Masha-forgetful"><a href="#E-Masha-forgetful" class="headerlink" title="E - Masha-forgetful"></a>E - Masha-forgetful</h1><p>很容易想到，将全部块分为长度2和3的，因为2和3可以组成大于1的所有自然数。接下来就用简单的dp存一下，最后路径返回记录一下答案就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _; <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        map&lt;string, tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            string s; cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">2</span> &lt;= m) mp.<span class="built_in">insert</span>(&#123;s.<span class="built_in">substr</span>(j, <span class="number">2</span>), &#123;j + <span class="number">1</span>, j + <span class="number">2</span>, i&#125;&#125;);</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">3</span> &lt;= m) mp.<span class="built_in">insert</span>(&#123;s.<span class="built_in">substr</span>(j,<span class="number">3</span>), &#123;j+<span class="number">1</span>, j+<span class="number">3</span>, i&#125;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(m+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        string s; cin &gt;&gt; s; s = <span class="string">&#x27;#&#x27;</span> + s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                string tmp = s.<span class="built_in">substr</span>(i - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(tmp)) dp[i] |= dp[i<span class="number">-2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                string tmp = s.<span class="built_in">substr</span>(i<span class="number">-2</span>, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (mp.<span class="built_in">count</span>(tmp)) dp[i] |= dp[i<span class="number">-3</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dp[m]) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> now = m;</span><br><span class="line">            vector&lt;tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; ve;</span><br><span class="line">            <span class="keyword">while</span> (now) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[now<span class="number">-2</span>]) &#123;</span><br><span class="line">                    string tmp = s.<span class="built_in">substr</span>(now<span class="number">-1</span>, <span class="number">2</span>);</span><br><span class="line">                    ve.<span class="built_in">push_back</span>(mp[tmp]);</span><br><span class="line">                    now -= <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[now<span class="number">-3</span>]) &#123;</span><br><span class="line">                    string tmp = s.<span class="built_in">substr</span>(now<span class="number">-2</span>, <span class="number">3</span>);</span><br><span class="line">                    ve.<span class="built_in">push_back</span>(mp[tmp]);</span><br><span class="line">                    now -= <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">reverse</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">            cout &lt;&lt; ve.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [l,r,i] : ve) &#123;</span><br><span class="line">                cout &lt;&lt; l &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; r &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-MinOr-Tree"><a href="#G-MinOr-Tree" class="headerlink" title="G - MinOr Tree"></a>G - MinOr Tree</h1><p>求或的最小生成树</p><p>最开始我们将30位全部置为1，代表全部的边都可取</p><p>不难想到通过位去计算，从高位到低位去置0，如果当前边权包含在当前状态里，这条边是可取的，我们只需要判断连通性就好了，复杂度是$O(30<em>m</em>logn)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _; cin &gt;&gt; _; <span class="keyword">while</span> (_--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line"><span class="comment">//        for (int i = 1; i &lt;= n; i++) fa[i] = i;</span></span><br><span class="line">        <span class="keyword">int</span> now = (<span class="number">1</span> &lt;&lt; <span class="number">30</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = now - (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) fa[j] = j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e[j].w &amp; tmp) == e[j].w) &#123;</span><br><span class="line">                    <span class="keyword">int</span> u = <span class="built_in">find</span>(e[j].u);</span><br><span class="line">                    <span class="keyword">int</span> v = <span class="built_in">find</span>(e[j].v);</span><br><span class="line">                    <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">                        fa[u] = v;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">find</span>(j) != <span class="built_in">find</span>(<span class="number">1</span>)) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) now -= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; now &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络期末复习</title>
      <link href="/2022/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h2 id="1-1-计算机网络在信息时代的作用"><a href="#1-1-计算机网络在信息时代的作用" class="headerlink" title="1.1 计算机网络在信息时代的作用"></a>1.1 计算机网络在信息时代的作用</h2><p>21世纪的重要特征是<strong>数字化、网络化和信息化</strong>，它是一个以网络为核心的信息时代。</p><p>互联网具有两个重要基本特点，即<strong>联通性和共享</strong>。</p><h2 id="1-2-互联网概述"><a href="#1-2-互联网概述" class="headerlink" title="1.2 互联网概述"></a>1.2 互联网概述</h2><p>计算机网络由若干<strong>结点</strong>和连接这些结点的<strong>链路</strong>组成。</p><h2 id="1-3-互联网的组成"><a href="#1-3-互联网的组成" class="headerlink" title="1.3 互联网的组成"></a>1.3 互联网的组成</h2><p>互联网的拓扑结构虽然非常复杂，并且在地理上覆盖了全球，但从其工作方式上看，可以划分为两大块：</p><p>（1）<strong>边缘部分</strong>  由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信和资源共享。</p><p>（2）<strong>核心部分</strong>  由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的。 </p><p>在网络边缘的端系统之间的通信方式通常可以划分为两大类：<strong>客户-服务器方式</strong>和<strong>对等方式</strong>。</p><p><strong>1.客户-服务器方式</strong> </p><p>特征：客户是服务请求方，服务器是服务提供方。</p><p><strong>客户程序</strong>在通信时主动向远程服务器发起通信，因此客户程序必须知道服务器程序的地址。</p><p><strong>服务器程序</strong>时一种专门用来提供某种服务的程序，可<strong>同时</strong>处理多个远地或本地客户的请求·。</p><p><strong>2.对等连接方式</strong></p><p>特征：两台主机在通信时并不区分哪一个是服务请求哪一个是服务提供方。</p><p>在互联网的核心部分起特殊作用的是<strong>路由器</strong>。</p><p>路由器是实现<strong>分组交换</strong>的关键构件，其任务是<strong>转发收到的分组</strong>。</p><p>分组交换采用<strong>存储转发</strong>技术。通常我们把要发送的整块数据称为一个报文。分组是在互联网中传送的<strong>数据单元</strong>，分组的首部包含了诸如<strong>目的地址</strong>和<strong>源地址</strong>等重要信息。</p><p><strong>分组交换</strong>的优点：</p><ol><li><strong>高效</strong> 在分组传输的过程中动态分配传输带宽，对通信链路是逐段占用。</li><li><strong>灵活</strong> 为每一个分组独立地选择最合适的转发路由。</li><li><strong>迅速</strong> 以分组作为传送单位，可以不先建立链接就能向其他主机发送分组。</li><li><strong>可靠</strong> 保证可靠性的网络协议，分布式多路由的分组交换网，使网络有很好的生存性。</li></ol><p>三种交换方式：电路交换、报文交换、分组交换</p><h2 id="1-5-计算机网络的类别"><a href="#1-5-计算机网络的类别" class="headerlink" title="1.5 计算机网络的类别"></a>1.5 计算机网络的类别</h2><h3 id="1-5-2几种不同类别的计算机网络"><a href="#1-5-2几种不同类别的计算机网络" class="headerlink" title="1.5.2几种不同类别的计算机网络"></a>1.5.2几种不同类别的计算机网络</h3><p><strong>按照网络的作用范围进行分类</strong></p><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个人区域网PAN</li></ul><p><strong>按照网络的使用者进行分类</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>用来把用户接入到互联网的网络</strong></p><p>接入网AN，它又称为本地接入网或居民接入网。接入网本身既不属于互联网核心部分，也不属于互联网的边缘部分。</p><h2 id="1-6-计算机网络的性能"><a href="#1-6-计算机网络的性能" class="headerlink" title="1.6 计算机网络的性能"></a>1.6 计算机网络的性能</h2><h3 id="1-6-1-计算机网络的性能指标"><a href="#1-6-1-计算机网络的性能指标" class="headerlink" title="1.6.1 计算机网络的性能指标"></a>1.6.1 计算机网络的性能指标</h3><p><strong>速率</strong></p><p>比特是信息量的单位</p><p>网络技术中的速率指的是数据的传送速率，它也称为<strong>数据率</strong></p><p> <strong>带宽</strong></p><p>在计算机网络中，带宽用来表示网络中<strong>某通道传送数据的能力</strong>，因此网络带宽表示在单位时间内网络中的某信道能通过的<strong>最高数据率</strong></p><p>带宽的单位是<strong>比特每秒</strong></p><p><strong>吞吐量</strong></p><p>吞吐量表示在单位时间内通过某个网络的<strong>实际数据量</strong></p><p><strong>时延</strong></p><p>时延是指数据从网络的一端传送到另一端所需的时间</p><ul><li><p><strong>发送时延</strong></p><p>主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间</p><p>$发送时延=\frac{数据帧长度(bit)}{发送速率(bit/s)}$ </p></li><li><p><strong>传播时延</strong></p><p>电磁波在信道中传播一定的距离需要花费的时间</p><p>$传播时延=\frac{信道的长度(m)}{电磁波在信道上点的传播速率(m/s)}$ </p></li><li><p><strong>处理时延</strong></p><p>主机和路由器在接受到分组时要花费一定的时间进行处理</p></li><li><p><strong>排队时延</strong></p><p>分组在经过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。在路由器确定了转发接口后，还要在输出队列中排队等待转发</p></li></ul><p><strong>时延带宽积</strong></p><p>$时延带宽积=传播时延*带宽$</p><p><strong>往返时间RTT</strong></p><p>$有效数据率=\frac{数据长度}{发送时间+RTT}$ </p><p><strong>利用率</strong></p><p>利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>两种</p><p>完全空闲的信道的利用率是零</p><p>网络利用率是全网络的信道利用率的加权平均值</p><p><strong>信道利用率并非越高越好</strong></p><p>信道或网络利用率过高会产生非常大的时延</p><h3 id="1-6-2-计算机网络的非性能特征"><a href="#1-6-2-计算机网络的非性能特征" class="headerlink" title="1.6.2 计算机网络的非性能特征"></a>1.6.2 计算机网络的非性能特征</h3><ul><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可拓展性和可升级性</li><li>易于管理和维护</li></ul><h2 id="1-7-计算机网络体系结构"><a href="#1-7-计算机网络体系结构" class="headerlink" title="1.7 计算机网络体系结构"></a>1.7 计算机网络体系结构</h2><h3 id="1-7-2-协议与划分层次"><a href="#1-7-2-协议与划分层次" class="headerlink" title="1.7.2 协议与划分层次"></a>1.7.2 协议与划分层次</h3><p><strong>网络协议</strong>：为进行网络中的数据交换而建立的规则、标准或约定</p><p>网络协议主要由三个要素组成</p><ul><li>语法</li><li>语义</li><li>同步</li></ul><p><strong>分层</strong>带来的好处</p><ul><li>各层之间是独立的</li><li>灵活性好</li><li>结构上可分割开</li><li>易于实现和维护</li><li>能促进标准化工作</li></ul><p>通常各层所要完成的功能主要有</p><ul><li>差错控制</li><li>流量控制</li><li>分段和重装</li><li>复用和分用</li><li>连接建立和释放</li></ul><p>计算机网络的各层及其协议的集合就是<strong>网络的体系结构</strong></p><p>体系结构是抽象的，而现实则是具体的，是真正在运行的计算机硬件和软件</p><h3 id="1-7-3-具有五层协议的体系结构"><a href="#1-7-3-具有五层协议的体系结构" class="headerlink" title="1.7.3 具有五层协议的体系结构"></a>1.7.3 具有五层协议的体系结构</h3><ul><li><p>应用层</p><p>应用层的任务是通过<strong>应用进程</strong>间的交互来完成特定网络应用</p><p>应用层协议定义的是应用进程间通信和交互的规则</p><p>我们把应用层交互的数据单元称为<strong>报文</strong></p></li><li><p>运输层</p><p>运输层的任务就是负责向<strong>两台主机中进程之间的通信</strong>提供<strong>通用的数据传输</strong>服务</p><p>运输层主要使用以下两种协议</p><ul><li>传输控制协议TCP</li><li>用户数据报协议UDP</li></ul></li><li><p>网络层</p><p>网络层负责为分组交换网上的不同<strong>主机</strong>提供通信服务</p><p>网络层把运输层产生的报文段或用户数据封装成<strong>分组</strong>或<strong>包</strong>进行传送</p><p>互联网是由大量的<strong>异构</strong>网络通过<strong>路由器</strong>相互连接起来的</p></li><li><p>数据链路层</p><p>数据链路层将网络层交下来的IP数据组装成帧，每一帧都包括<strong>数据</strong>和必要的<strong>控制信息</strong></p></li><li><p>物理层</p><p>在物理层上所传的数据的单位是比特</p></li></ul><h3 id="1-7-4-实体、协议、服务和服务访问点"><a href="#1-7-4-实体、协议、服务和服务访问点" class="headerlink" title="1.7.4 实体、协议、服务和服务访问点"></a>1.7.4 实体、协议、服务和服务访问点</h3><p><strong>实体</strong></p><p>表示任何发送或接收信息的硬件或软件进程</p><p><strong>协议</strong></p><p>控制两个对等实体进行通信的规则的集合</p><p>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务</p><p>协议是<strong>水平的</strong>，服务是<strong>垂直的</strong></p><p>在同一系统中相邻两层的实体进行交互的地方，通常称为<strong>服务访问点SAP</strong></p><h1 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h1><h2 id="2-1-物理层的基本概念"><a href="#2-1-物理层的基本概念" class="headerlink" title="2.1 物理层的基本概念"></a>2.1 物理层的基本概念</h2><p>物理层的作用：尽可能屏蔽掉传输媒体和通信手段的差异，使物理层上面的数据链路层感觉不到这些差异</p><p>用于物理层的协议也常称之为物理层<strong>规程</strong></p><p>可以将物理层的主要任务描述为确定与传输媒体的接口有关的一些特性</p><ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul><p>数据在计算机内部是<strong>并行传输</strong>，但在通信路线上是<strong>串行传输</strong></p><h2 id="2-2-数据通信的基础知识"><a href="#2-2-数据通信的基础知识" class="headerlink" title="2.2 数据通信的基础知识"></a>2.2 数据通信的基础知识</h2><h3 id="2-2-1数据通信的基础知识"><a href="#2-2-1数据通信的基础知识" class="headerlink" title="2.2.1数据通信的基础知识"></a>2.2.1数据通信的基础知识</h3><p>一个数据通信系统可划分为三大部分</p><ul><li>源系统<ul><li>源点</li><li>发送器</li></ul></li><li>传输系统</li><li>目的系统<ul><li>接收器</li><li>终点</li></ul></li></ul><p>通信的目的是传送<strong>消息</strong>，<strong>数据</strong>是运送消息的实体，<strong>信号</strong>是数据的电气或电磁的表现</p><p>根据信号中代表消息的参数的取值方式不同，信号可以分为两大类</p><ul><li><p>模拟信号（连续信号）</p></li><li><p>数字信号（离散信号）</p></li></ul><h3 id="2-2-2-有关信道的基本概念"><a href="#2-2-2-有关信道的基本概念" class="headerlink" title="2.2.2 有关信道的基本概念"></a>2.2.2 有关信道的基本概念</h3><p>从通信双方的信息交互来看，可以有以下三种基本方式：</p><ul><li>单向通信</li><li>双向交替通信</li><li>双向同时通信</li></ul><p>来自信源的信号常称为<strong>基带信号</strong></p><p>基带信号往往包含较多的低频成分，因此可以对基带信号进行<strong>调制</strong></p><p>调制的两种方法：</p><ul><li><p>常用编码方式</p><p>数字信号转化为数字信号</p><ul><li>不归零制</li><li>归零制</li><li>曼彻斯特编码</li><li>差分曼彻斯特编码</li></ul></li><li><p>基本的带通调制方法</p><p>数字信号转化为模拟信号</p><ul><li>调幅</li><li>调频</li><li>调相</li></ul></li></ul><h3 id="2-2-3-信道的极限容量"><a href="#2-2-3-信道的极限容量" class="headerlink" title="2.2.3 信道的极限容量"></a>2.2.3 信道的极限容量</h3><p>信号失真因素</p><ul><li><p>码元传输的速率高</p></li><li><p>信号传输的距离远</p></li><li><p>噪声干扰越大</p></li><li><p>传输媒体质量差</p></li></ul><p>限制码元在信道上传输速率的因素有以下两个</p><ul><li><p>信道能够通过的频率范围</p><p>在任何信道中，码元传输的速率是有上限的，传输速率超过此上限就会出现严重的<strong>码间串扰</strong>的问题，使接收端对码元的判决称为不可能</p></li><li><p>信噪比</p></li></ul><p>$信噪比(dB)=10log_{10}(S/N) (dB)$ </p><p><strong>香农公式</strong></p><p>$信道的极限信息传输率C=Wlog_2(1+S/N)$ </p><p>W为信道的带宽，S为信道内所传信号的平均功率，N为信道内部的高斯噪声功率</p><p>信道的带宽或信道中的信噪比越大，信息的极限传输速率就越高</p><h2 id="2-4-信道复用技术"><a href="#2-4-信道复用技术" class="headerlink" title="2.4 信道复用技术"></a>2.4 信道复用技术</h2><p><strong>复用</strong></p><ul><li><p>频分复用</p><p>频分复用的所有用户在<strong>同样</strong>的时间占用<strong>不同</strong>的带宽资源</p></li><li><p>时分复用</p><p>时分复用的所有用户是在<strong>不同</strong>的时间占用<strong>同样</strong>的频带宽度</p><p>更有利于<strong>数字信号</strong>的传输</p><p>可能会造成线路资源的浪费</p></li></ul><p>在进行通信时，<strong>复用器</strong>总是和<strong>分用器</strong>成对的使用，在复用器和分用器之间是用户共享的高速信道</p><p><strong>统计时分复用STDM</strong>（异步时分复用）是一种改进的时分复用，它能明显提高信道的利用率(STDM帧按需动态分配时隙)</p><p><strong>集中器</strong>常使用这种统计时分复用</p><h3 id="2-4-2-波分复用"><a href="#2-4-2-波分复用" class="headerlink" title="2.4.2 波分复用"></a>2.4.2 波分复用</h3><p>波分复用是<strong>光的频分复用</strong> </p><p>使用一根光纤来同时传输多个频率很接近的光载波信号</p><p><strong>密集波分复用</strong></p><p>在一根光纤上复用几十路或更多路数的光载波信号</p><h3 id="2-4-3-码分复用"><a href="#2-4-3-码分复用" class="headerlink" title="2.4.3 码分复用"></a>2.4.3 码分复用</h3><p>码分复用CDM是另一种共享信道的方法</p><p>各用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰</p><h2 id="2-5-数字传输系统"><a href="#2-5-数字传输系统" class="headerlink" title="2.5 数字传输系统"></a>2.5 数字传输系统</h2><p>早期的数字传输系统存在许多缺点，其中最主要的是以下两个：</p><ul><li>速率标准不统一</li><li>不是同步传输</li></ul><h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><p>信道：</p><ul><li>点对点信道</li><li>广播信道</li></ul><h2 id="3-1-使用点对点信道的数据链路层"><a href="#3-1-使用点对点信道的数据链路层" class="headerlink" title="3.1 使用点对点信道的数据链路层"></a>3.1 使用点对点信道的数据链路层</h2><p><strong>链路</strong>就是从一个结点到相邻结点的一段物理线路</p><p>数据链路层的协议数据单元——<strong>帧</strong></p><p>数据链路层把网络层交下来的数据构成<strong>帧</strong>发送到链路上，以及把接收到的<strong>帧</strong>中的数据取出并上交给网络层</p><p>网络层协议数据单元是<strong>IP数据报</strong></p><p><strong>三个基本问题</strong></p><ul><li><p>封装成帧</p><p>在一段数据的前后分别添加首部和尾部（帧定界）</p><p>每一种链路层协议都规定了所能传送的帧的<strong>数据部分长度上限——最大传送单元MTU</strong></p></li><li><p>透明传输</p><p>使传输过程中数据中出现的控制字符”SOH”和”EOT”在接收端不被解释为控制字符</p><p>具体实现方法：字节填充，插入转义字符</p></li><li><p>差错检测</p><p><strong>循环冗余检验CRC</strong></p><ol><li>添加n位冗余码，将M变为$2^n$ M</li><li>求出冗余码=$2^n$ M % P，即FCS</li></ol><p>除数P=1101，P(x)生成多项式为$X^3+X^2+1$</p></li></ul><h2 id="3-2-点对点协议PPP"><a href="#3-2-点对点协议PPP" class="headerlink" title="3.2 点对点协议PPP"></a>3.2 点对点协议PPP</h2><h3 id="3-2-1-PPP协议的特点"><a href="#3-2-1-PPP协议的特点" class="headerlink" title="3.2.1 PPP协议的特点"></a>3.2.1 PPP协议的特点</h3><ul><li>简单，只检验差错，而不是纠正差错</li><li>不使用序号，也不进行流量控制</li><li>可同时支持多种网络协议</li></ul><p><strong>PPP协议应该满足的需求</strong></p><ul><li>简单</li><li>封装成帧</li><li>透明性</li><li>多种网络层协议</li><li>多种类型链路</li><li>差错检验</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul><p><strong>PPP协议的组成</strong></p><ul><li>一个将IP数据报封装到串行链路的方法。PPP既支持异步链路，也支持面向比特的同步链路。<strong>IP数据报</strong>就是在PPP帧中的信息部分</li><li>一个用来建立、配置和测试数据链路连接的<strong>链路控制协议LCP</strong></li><li>一套<strong>网络控制协议NCP</strong></li></ul><p>PPP的首部和尾部分别为四个字段和两个字段。</p><p><strong>标志字段</strong>表示一个帧的开始和结束，如果连续出现两个标志字段就表示一个空帧</p><h3 id="3-2-3-PPP协议的工作状态"><a href="#3-2-3-PPP协议的工作状态" class="headerlink" title="3.2.3 PPP协议的工作状态"></a>3.2.3 PPP协议的工作状态</h3><p>双方建立了物理层连接后，PPP就进入<strong>链路建立</strong>状态，其目的是建立链路层的LCP连接</p><p>此时发送LCP的<strong>配置请求帧</strong>。链路的另一端可以发送以下几种响应的一种：</p><ul><li>配置确认帧   所有选项都接受</li><li>配置否认帧   所有选项都能理解但不接受</li><li>配置拒绝帧   选项有的无法识别或不能接受</li></ul><p>协商结束后进入<strong>鉴别</strong>状态</p><p>鉴别成功进入<strong>网络层协议</strong>状态</p><p>当网络层配置完毕后，链路就进入可进行数据通信的<strong>链路打开状态</strong></p><p>数据传输结束后，可以由链路的一端发送<strong>终止请求</strong>LCP分组，在收到对方发来的<strong>终止确认</strong>LCP分组后转到<strong>链路终止</strong></p><p>可见，PPP协议已不是纯粹的数据链路层的协议，它还包含了<strong>物理层</strong>和<strong>网络层</strong>的内容</p><h2 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h2><h2 id="3-3-1-局域网中的数据链路层"><a href="#3-3-1-局域网中的数据链路层" class="headerlink" title="3.3.1 局域网中的数据链路层"></a>3.3.1 局域网中的数据链路层</h2><p><strong>局域网的主要特点</strong></p><ul><li>网络为一个单位所拥有，且地理范围和站点数目均有限</li></ul><p>局域网的主要优点</p><ul><li>具有<strong>广播功能</strong>，从一个站点很方便地访问全网，局域网上的主机可以共享连接在局域网上的各种硬件和软件资源</li><li>便于系统的拓展和逐渐演变，各设备的位置可灵活调整和改变</li><li>提高了系统的<strong>可靠性</strong>，<strong>可用性</strong>和<strong>生存性</strong></li></ul><p>局域网可以按网络拓扑图进行分类</p><ul><li>星形网</li><li>环形网</li><li>总线网</li></ul><p><strong>共享信道</strong></p><ul><li>静态划分信道<ul><li>频分复用</li><li>时分复用</li><li>波分复用</li><li>码分复用</li></ul></li><li>动态媒体接入控制（多点接入）<ul><li>随机接入</li><li>接受接入，如多点线路探询，或轮询</li></ul></li></ul><p><strong>以太网的两个标准</strong></p><ul><li><p>DIX Ethernet V2 是世界上第一个局域网产品（以太网）的规约</p></li><li><p>IEEE 802.3 是第一个 IEEE 的以太网标准</p></li></ul><p>数据链路层的两个子层</p><ul><li>逻辑链路控制 LLC子层</li><li>媒体接入控制 MAC子层</li></ul><p>与接入到传输媒体有关的内容都放在<strong>MAC子层</strong>，而<strong>LLC子层</strong>则与传输媒体无关</p><p>不管采用何种协议的局域网，对LLC子层来说都是透明的（LLC子层看不见下面的局域网）</p><p><strong>配适器的作用</strong></p><p>网络接口板又称为<strong>通信适配器</strong>或<strong>网络接口卡</strong></p><p>以太网的适配器有过滤功能，它只接收<strong>单播帧</strong>、<strong>广播帧</strong>或<strong>多播帧</strong></p><p>适配器的<strong>重要功能</strong>：</p><ul><li>进行串行/并行转换</li><li>对数据进行缓存</li><li>在计算机的操作系统安装设备驱动程序</li><li>实现以太网协议</li></ul><h3 id="3-3-2-CSMA-CD协议"><a href="#3-3-2-CSMA-CD协议" class="headerlink" title="3.3.2 CSMA/CD协议"></a>3.3.2 CSMA/CD协议</h3><p>最初的以太网是将许多计算机都连接到一根总线上。易于实现<strong>广播通信</strong></p><p>为了实现<strong>一对一</strong>通信，将接收站的硬件地址写入帧首部中的<strong>目的地址</strong>字段中。仅当数据帧中的目的地址与适配器的硬件地址一致时，才能接收这个数据帧</p><p>为了通信方便，以太网采取以下两种措施：</p><ul><li><p>采用较为灵活的<strong>无连接的工作方式</strong></p><p><strong>缺点：</strong>若多台计算机或多个站点同时发送时，会产生发送碰撞或冲突，导致发送失败</p><p>解决方案：CSMA/CD协议 （载波监听多点接入/碰撞检测）</p><ul><li><strong>多点接入</strong>：总线型网络，许多计算机以多点接入的方式连接在一根总线上</li><li><strong>载波监听</strong>：每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞</li><li><strong>碰撞检测</strong>：计算机边发送数据边检测信道上的信号电压大小，看是否有碰撞发生</li></ul></li><li><p>使用曼彻斯特编码</p></li></ul><h2 id="3-4-拓展以太网"><a href="#3-4-拓展以太网" class="headerlink" title="3.4 拓展以太网"></a>3.4 拓展以太网</h2><h3 id="3-4-1-在物理层拓展以太网"><a href="#3-4-1-在物理层拓展以太网" class="headerlink" title="3.4.1 在物理层拓展以太网"></a>3.4.1 在物理层拓展以太网</h3><p>使用<strong>集线器</strong>可以在物理层拓展以太网</p><p><strong>优点</strong></p><ul><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信</li><li>扩大了以太网覆盖的地理范围</li></ul><p><strong>缺点</strong></p><ul><li>碰撞域增大了，但总的吞吐量并未提高</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来</li></ul><h3 id="3-4-2-在数据链路层拓展以太网"><a href="#3-4-2-在数据链路层拓展以太网" class="headerlink" title="3.4.2 在数据链路层拓展以太网"></a>3.4.2 在数据链路层拓展以太网</h3><p>使用<strong>以太网交换机</strong>可以在数据链路层拓展以太网</p><p>以太网交换机实质上是一个<strong>多接口的网桥</strong></p><p>以太网交换机具有<strong>并行性</strong></p><h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><p>网络层协议数据单元是<strong>IP数据报</strong></p><p>重要内容</p><ul><li>虚拟互连网络的概念</li><li>IP地址与物理地址的关系</li><li>传统的分类的IP地址和无分类域间路由选择CIDR</li><li>路由选择协议的工作原理</li></ul><h2 id="4-1-网络层提供的两种服务"><a href="#4-1-网络层提供的两种服务" class="headerlink" title="4.1 网络层提供的两种服务"></a>4.1 网络层提供的两种服务</h2><ul><li>虚电路服务</li><li>数据报服务</li></ul><p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务</p><h2 id="4-2-网际协议IP"><a href="#4-2-网际协议IP" class="headerlink" title="4.2 网际协议IP"></a>4.2 网际协议IP</h2><p>与IP协议配套使用的还有三个协议：</p><ul><li>地址解析协议 <strong>ARP</strong></li><li>网际控制报文协议 <strong>ICMP</strong></li><li>网际组管理协议 <strong>IGMP</strong></li></ul><h3 id="4-2-1-虚拟互连网络"><a href="#4-2-1-虚拟互连网络" class="headerlink" title="4.2.1 虚拟互连网络"></a>4.2.1 虚拟互连网络</h3><p>将网络互相连接在一起要使用一些<strong>中间设备</strong></p><ul><li>物理层使用的中间设备叫做<strong>转发器</strong></li><li>数据链路层使用的中间设备叫做<strong>网桥</strong>或<strong>桥接器</strong></li><li>网络层使用的中间设备叫做<strong>路由器</strong></li><li>在网络层以上使用的中间设备叫做<strong>网关</strong></li></ul><p>互联网可以由多种<strong>异构网络</strong>互连组成</p><h3 id="4-2-2-分类的IP地址"><a href="#4-2-2-分类的IP地址" class="headerlink" title="4.2.2 分类的IP地址"></a>4.2.2 分类的IP地址</h3><p>IP地址的编址方法共经过了三个历史阶段</p><ul><li>分类的IP地址</li><li>子网的划分</li><li>构成超网</li></ul><p>每一类地址都有两个固定长度的字段组成</p><p>第一个字段是<strong>网络号</strong></p><p>第二个字段是<strong>主机号</strong></p><p><strong>IP地址指派范围</strong></p><table><thead><tr><th align="center">网络类别</th><th align="center">可指派的网络数</th><th align="center">第一个可指派的网络号</th><th align="center">最后一个可指派的网络号</th><th align="center">每个网络中可指派的主机数</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">126($2^7-2$)</td><td align="center">1</td><td align="center">126</td><td align="center">16777214($2^{24}-2$)</td></tr><tr><td align="center">B</td><td align="center">16384($2^{14}$)</td><td align="center">128.0</td><td align="center">191.255</td><td align="center">65534($2^{16}-2$)</td></tr><tr><td align="center">C</td><td align="center">2097152($2^{21}$)</td><td align="center">192.0.0</td><td align="center">233.255.255</td><td align="center">254($2^8-2$)</td></tr></tbody></table><p>IP地址的<strong>重要特点</strong></p><ul><li>每一个IP地址都有网络号和主机号两部分组成</li><li>实际上IP地址是标志一台主机和一条链路的接口（<strong>多归属主机</strong>）</li><li>用转发器或网桥连接起来的若干个局域网仍然为一个网络</li><li>在IP地址中，所有分配到网络号的网络都是平等的</li></ul><h3 id="4-2-3-IP地址与硬件地址"><a href="#4-2-3-IP地址与硬件地址" class="headerlink" title="4.2.3 IP地址与硬件地址"></a>4.2.3 IP地址与硬件地址</h3><p>物理地址是<strong>数据链路层</strong>和<strong>物理层</strong>使用的地址</p><p>IP地址是<strong>网络层</strong>和以上各层使用的地址，是一种逻辑地址</p><h3 id="4-2-4-地址解析协议ARP"><a href="#4-2-4-地址解析协议ARP" class="headerlink" title="4.2.4 地址解析协议ARP"></a>4.2.4 地址解析协议ARP</h3><p>ARP协议的用途：从<strong>网络层</strong>使用的IP地址，解析出在<strong>数据链路层</strong>使用的硬件地址</p><p>ARP高速缓存：本局域网上的各主机和路由器的<strong>IP地址</strong>到<strong>硬件地址</strong>的映射表</p><p>工作过程：</p><ol><li>ARP进程在本局域网上广播发送一个ARP请求分组</li><li>在本局域网上的所有主机上运行ARP进程都收到此ARP请求分组</li><li>主机B的IP地址与ARP请求分组中查找的IP地址一致，就收下这个ARP分组，并向主机A发送ARP响应分组，同时在这个ARP响应分组中写入自己的硬件地址</li><li>主机A收到主机B的ARP响应分组后，就在其ARP高速缓存中写入主机B的IP地址到硬件地址的映射</li></ol><h3 id="4-2-6-IP层转发分组的流程"><a href="#4-2-6-IP层转发分组的流程" class="headerlink" title="4.2.6 IP层转发分组的流程"></a>4.2.6 IP层转发分组的流程</h3><ol><li>从数据报的首部提取目的的主机IP地址D，得出目的的网络地址N</li><li>若N就是与此路由器直接相连的某个网络地址，则进行<strong>直接交付</strong>，否则间接交付，执行3</li><li>若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器，否则执行4</li><li>若路由表中有到达网络N的路由，则把数据报传送给路由表中所指明的下一跳路由器，否则执行5</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器，否则执行6</li><li>报告转发分组出错</li></ol><h2 id="4-3-划分子网和构造超网"><a href="#4-3-划分子网和构造超网" class="headerlink" title="4.3 划分子网和构造超网"></a>4.3 划分子网和构造超网</h2><h3 id="4-3-1-划分子网"><a href="#4-3-1-划分子网" class="headerlink" title="4.3.1 划分子网"></a>4.3.1 划分子网</h3><p>从两级IP地址到三级IP地址</p><ul><li>IP地址的利用率有时很低</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏</li><li>两级IP地址不够灵活</li></ul><p>两级IP地址在<strong>本单位内部</strong>变成了三级IP地址：<strong>网络号</strong>、<strong>子网号</strong>和<strong>主机号</strong></p><p><strong>子网掩码</strong></p><p>子网掩码中网络号+子网号全为1，主机号全为0</p><p>A类地址的默认子网掩码是255.0.0.0</p><p>B类地址的默认子网掩码是255.255.0.0</p><p>C类地址的默认子网掩码是255.255.255.0</p><p>子网掩码是一个网络或一个子网的重要属性</p><p>划分子网增加了灵活性，但却减少了能够连接在网络上的主机总数</p><h3 id="4-3-2-使用子网时分组的转发"><a href="#4-3-2-使用子网时分组的转发" class="headerlink" title="4.3.2 使用子网时分组的转发"></a>4.3.2 使用子网时分组的转发</h3><p>使用子网划分后，路由表必须包含</p><ul><li>目的网络地址</li><li>子网掩码</li><li>下一跳地址</li></ul><h3 id="4-3-3-无分类编制CIDR（构造超网）"><a href="#4-3-3-无分类编制CIDR（构造超网）" class="headerlink" title="4.3.3 无分类编制CIDR（构造超网）"></a>4.3.3 无分类编制CIDR（构造超网）</h3><p>使用<strong>变长子网掩码</strong>VLSM可以进一步提高IP地址资源利用率</p><p>无分类域间路由选择CIDR主要特点</p><ul><li>CIDR消除了传统的A、B、C类地址以及划分子网的概念</li><li>CIDR把网络前缀都相同的连续IP地址组成一个CIDR地址块</li></ul><h2 id="4-4-网际控制报文协议ICMP"><a href="#4-4-网际控制报文协议ICMP" class="headerlink" title="4.4 网际控制报文协议ICMP"></a>4.4 网际控制报文协议ICMP</h2><p>用途：为了有效地转发IP数据报和提高交付成功的机会</p><h3 id="4-4-1-ICMP报文的种类"><a href="#4-4-1-ICMP报文的种类" class="headerlink" title="4.4.1 ICMP报文的种类"></a>4.4.1 ICMP报文的种类</h3><p>ICMP报文的种类有两种</p><ul><li><strong>ICMP差错报告报文</strong><ul><li>终点不可达</li><li>时间超过</li><li>参数问题</li><li>改变路由</li></ul></li><li><strong>ICMP询问报文</strong><ul><li>回送请求和回答</li><li>时间戳请求和问答</li></ul></li></ul><p>ICMP的重要应用：<strong>PING</strong></p><h2 id="4-5-互联网的路由选择协议"><a href="#4-5-互联网的路由选择协议" class="headerlink" title="4.5 互联网的路由选择协议"></a>4.5 互联网的路由选择协议</h2><h3 id="4-5-1-有关路由选择协议的几个基本概念"><a href="#4-5-1-有关路由选择协议的几个基本概念" class="headerlink" title="4.5.1 有关路由选择协议的几个基本概念"></a>4.5.1 有关路由选择协议的几个基本概念</h3><p><strong>理想的路由算法</strong></p><ul><li>算法必须是正确的和完整的</li><li>算法在计算上应简单</li><li>算法应能适应通信量和网络拓扑的变化</li><li>算法应具有稳定性</li><li>算法应是公平的</li><li>算法应是最佳的</li></ul><p><strong>分层次的路由选择协议</strong></p><p>互联网采用的路由选择协议主要是自适应的、分布式路由选择协议</p><p>为此，可以把整个互联网划分为许多较小的自治系统，一般都记作AS。一个AS对其他AS表现出的是<strong>一个单一的和一致的路由选择策略</strong> </p><p>互联网把路由选择协议划分为两大类</p><ul><li>内部网关协议IGP<ul><li>RIP、OSPF</li></ul></li><li>外部网关协议EGP<ul><li>BGP</li></ul></li></ul><p>自治系统之间的路由选择也叫作<strong>域间路由选择</strong>，而在自治系统内部的路由选择叫做<strong>域内路由选择</strong></p><h3 id="4-5-2-内部网关协议RIP"><a href="#4-5-2-内部网关协议RIP" class="headerlink" title="4.5.2 内部网关协议RIP"></a>4.5.2 内部网关协议RIP</h3><p><strong>适用小型互联网</strong></p><p>RIP的中文名称叫<strong>路由信息协议</strong>，是一种分布式的<strong>基于距离向量的路由选择协议</strong></p><p>RIP协议的特点</p><ul><li>仅和相邻路由器交换信息</li><li>路由器交换的信息是当前本路由器所知道的全部信息，即自己现在的路由表</li><li>按固定的时间间隔交换路由信息</li></ul><p>路由表更新的原则是找出到每个目的网络的<strong>最短距离</strong>，这种更新算法又称为<strong>距离向量算法</strong></p><p><strong>RIP协议的报文格式</strong></p><p>RIP协议由<strong>首部</strong>和<strong>路由</strong>部分组成</p><p>RIP存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器</p><p>RIP协议最大的优点是<strong>实现简单、开销较小</strong></p><h3 id="4-5-3-内部网关协议OSPF"><a href="#4-5-3-内部网关协议OSPF" class="headerlink" title="4.5.3 内部网关协议OSPF"></a>4.5.3 内部网关协议OSPF</h3><p><strong>适用大型互联网</strong></p><p>开放最短路优先OSPF是基于Dijkstra提出的<strong>最短路径算法SPF</strong></p><p>OSPF最主要的特征就是使用分布式的<strong>链路状态协议</strong>，而不是向RIP那样的<strong>距离向量协议</strong></p><p><strong>工作原理</strong></p><ol><li>向本自治系统中所有路由器发送信息，使用<strong>洪泛法</strong></li><li>发送的信息就是与本路由器<strong>相邻的所有路由器的链路状态</strong>，但这只是路由器所知道的<strong>部分信息</strong></li><li>只有当链路状态发生变化时，路由器才向所有路由器用<strong>洪泛法</strong>发送此信息</li></ol><p>所有的路由器最终都能建立一个<strong>链路状态数据库</strong>，这个数据库实际上就是<strong>全网的拓扑结构图</strong></p><p>OSPF不用UDP而是<strong>直接用IP数据报传送</strong></p><p><strong>OSPF其他特点</strong></p><ul><li><p>OSPF允许管理员给每条路由指派不同的代价</p></li><li><p>如果到同一个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径，这叫做多路径间的<strong>负载平衡</strong></p></li><li><p>所有在 OSPF 路由器之间交换的分组都具有鉴别的功能，保证在可信赖的路由器之间交换信息</p></li><li><p>支持可变长度的子网划分和无分类编址 CIDR</p></li><li><p>每一个链路状态都带上一个 32 位的序号，序号越大状态就越新</p></li></ul><p><strong>OSPF五种分组类型</strong></p><ul><li>问候分组</li><li>数据库描述分组</li><li>链路状态请求分组</li><li>链路状态更新分组</li><li>链路状态确认分组</li></ul><h2 id="4-6-IPv6"><a href="#4-6-IPv6" class="headerlink" title="4.6 IPv6"></a>4.6 IPv6</h2><p>协议数据单元：<strong>分组</strong></p><p>IPv4：数据报</p><p><strong>变化</strong></p><ul><li><p>更大的地址空间，IPv6把地址从IPv4的32位增大到4倍，即<strong>128位</strong></p></li><li><p>扩展的地址层次结构</p></li><li><p>灵活的首部格式</p></li><li><p>改进的选项</p></li><li><p>允许协议继续扩充</p></li><li><p>支持即插即用</p></li><li><p>支持资源的预分配</p></li><li><p>首部改为8字节对齐</p></li></ul><p>组成：<strong>基本首部</strong>和<strong>有效载荷</strong></p><p>目的地址：<strong>单播、多播、任播</strong></p><p>地址使用<strong>冒号十六进制</strong>记法</p><h2 id="4-7-IP多播"><a href="#4-7-IP多播" class="headerlink" title="4.7 IP多播"></a>4.7 IP多播</h2><p>与单播相比，在一对多的通信中，IP多播可大大节约<strong>网络资源</strong></p><p>IP多播使用D类地址</p><p>IP多播需要使用<strong>网际组管理协议IGMP</strong>和<strong>多播路由选择协议</strong></p><h1 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章 运输层"></a>第五章 运输层</h1><h2 id="5-1运输层协议概述"><a href="#5-1运输层协议概述" class="headerlink" title="5.1运输层协议概述"></a>5.1运输层协议概述</h2><h3 id="5-1-1-进程之间的通信"><a href="#5-1-1-进程之间的通信" class="headerlink" title="5.1.1 进程之间的通信"></a>5.1.1 进程之间的通信</h3><p>从通信和信息处理的角度看，<strong>运输层向它上面的应用层提供通信服务</strong></p><p>通信真正的端点并不是主机而是主机中的<strong>进程</strong></p><p>网络层为主机之间提供<strong>逻辑通信</strong>，而运输层为应用进程之间提供<strong>端到端</strong>的<strong>逻辑通信</strong></p><p>运输层有一个很重要的功能：<strong>复用</strong>和<strong>分用</strong></p><p>运输层需要有两种不同的运输协议，即<strong>面向连接的TCP</strong>和<strong>无连接的UDP</strong></p><h3 id="5-1-2-运输层的两个主要协议"><a href="#5-1-2-运输层的两个主要协议" class="headerlink" title="5.1.2 运输层的两个主要协议"></a>5.1.2 运输层的两个主要协议</h3><ul><li>用户数据报协议UDP</li><li>传输控制协议TCP</li></ul><p>UDP在传送数据之前<strong>不需要先建立连接</strong>，<strong>不可靠信道</strong></p><p>TCP则提供<strong>面向连接的服务</strong>，在传送数据之前必须建立连接，<strong>全双工的可靠信道</strong></p><h3 id="5-1-3-运输层的端口"><a href="#5-1-3-运输层的端口" class="headerlink" title="5.1.3 运输层的端口"></a>5.1.3 运输层的端口</h3><p>复用：应用层所有的应用进程都可以通过运输层再传送到IP层</p><p>分用：运输层从IP层收到发送给各应用进程的数据后，必须分别交付指明的各应用进程</p><p>硬件端口是<strong>不同硬件设备</strong>之间进行交互的接口，而软件端口是<strong>应用层</strong>的各种协议进程与<strong>运输实体</strong>进行层间交互的一种地址</p><p>TCP/IP的运输层用一个<strong>16位</strong>端口号来标志一个端口</p><h2 id="5-2-用户数据报协议UDP"><a href="#5-2-用户数据报协议UDP" class="headerlink" title="5.2 用户数据报协议UDP"></a>5.2 用户数据报协议UDP</h2><h3 id="5-2-1-UDP概述"><a href="#5-2-1-UDP概述" class="headerlink" title="5.2.1 UDP概述"></a>5.2.1 UDP概述</h3><p>UDP主要特点</p><ul><li>UDP是<strong>无连接</strong>的</li><li>UDP使用<strong>尽最大努力交付</strong></li><li>UDP是<strong>面向报文</strong>的</li><li>UDP没有拥塞控制</li><li>UDP支持<strong>一对一、一对多、多对一和多对多</strong>的交互通信</li><li>UDP的首部开销小</li></ul><h3 id="5-2-2-UDP的首部格式"><a href="#5-2-2-UDP的首部格式" class="headerlink" title="5.2.2 UDP的首部格式"></a>5.2.2 UDP的首部格式</h3><p>UDP有两个字段：<strong>数据字段</strong>和<strong>首部字段</strong></p><p>各字段意义：</p><ul><li>源端口</li><li>目的端口</li><li>长度</li><li>检验和</li></ul><h2 id="5-3-传输控制协议TCP概述"><a href="#5-3-传输控制协议TCP概述" class="headerlink" title="5.3 传输控制协议TCP概述"></a>5.3 传输控制协议TCP概述</h2><h3 id="5-3-1-TCP最主要的特点"><a href="#5-3-1-TCP最主要的特点" class="headerlink" title="5.3.1 TCP最主要的特点"></a>5.3.1 TCP最主要的特点</h3><p>TCP主要特点</p><ul><li>TCP是面向连接的运输层协议</li><li>每一条TCP连接只能有两个端点</li><li>TCP提供可靠交付的服务</li><li>TCP提供全双工通信</li><li>面向字节流</li></ul><h3 id="5-3-2-TCP的连接"><a href="#5-3-2-TCP的连接" class="headerlink" title="5.3.2 TCP的连接"></a>5.3.2 TCP的连接</h3><p>TCP把<strong>连接</strong>作为<strong>最基本的抽象</strong></p><p>TCP的连接端口叫<strong>套接字</strong>或<strong>插口</strong></p><p>每一条TCP连接唯一地被通信两端的两个端点所确定</p><h2 id="5-4-可靠传输的工作原理"><a href="#5-4-可靠传输的工作原理" class="headerlink" title="5.4 可靠传输的工作原理"></a>5.4 可靠传输的工作原理</h2><h3 id="5-4-1-停止等待协议"><a href="#5-4-1-停止等待协议" class="headerlink" title="5.4.1 停止等待协议"></a>5.4.1 停止等待协议</h3><p>使用<strong>确认</strong>和<strong>重传</strong>机制我们就可以在<strong>不可靠的传输网络上实现可靠的通信</strong></p><p><strong>自动重传请求ARQ</strong></p><p>信道利用率：$U=\frac{T_D}{T_D+RTT+T_A}$ </p><p>$T_D$  A发送分组的时间</p><p>$T_A$  B确认分组的时间</p><p>RTT 往返时间</p><h3 id="5-4-2-连续ARQ协议"><a href="#5-4-2-连续ARQ协议" class="headerlink" title="5.4.2 连续ARQ协议"></a>5.4.2 连续ARQ协议</h3><p>连续ARQ协议规定，发送方没收到一个确认，就把发送窗口向前滑动一个分组的位置</p><p>接收方一般都是采用<strong>累积确认</strong>的方式，这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序号到达的最后一个分组发送确认</p><p>优点：容易实现，即使确认丢失也不必重传</p><p>缺点：不能向发送方反映出接收方已经正确收到所有分组的信息</p><h2 id="5-5-TCP报文段的首部格式"><a href="#5-5-TCP报文段的首部格式" class="headerlink" title="5.5 TCP报文段的首部格式"></a>5.5 TCP报文段的首部格式</h2><h2 id="5-6-TCP可靠传输的实现"><a href="#5-6-TCP可靠传输的实现" class="headerlink" title="5.6 TCP可靠传输的实现"></a>5.6 TCP可靠传输的实现</h2><h3 id="5-6-1-以字节为单位的滑动窗口"><a href="#5-6-1-以字节为单位的滑动窗口" class="headerlink" title="5.6.1 以字节为单位的滑动窗口"></a>5.6.1 以字节为单位的滑动窗口</h3><p>发送窗口和接收窗口</p><p>发送窗口中有三个指针P1、P2、P3</p><p>$x&lt;P1$ 已发送并且已经收到确认</p><p>$P1≤x&lt;P2$ 已发送但未收到确认</p><p>$P2≤x&lt;P3$ 允许发送但未发送</p><p>$x≥P3$ 不允许发送</p><h2 id="5-7-TCP的流量控制"><a href="#5-7-TCP的流量控制" class="headerlink" title="5.7 TCP的流量控制"></a>5.7 TCP的流量控制</h2><p>利用滑动窗口机制实现流量控制</p><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收</p><p>TCP的窗口单位是<strong>字节</strong></p><h2 id="5-8-TCP的拥塞控制"><a href="#5-8-TCP的拥塞控制" class="headerlink" title="5.8 TCP的拥塞控制"></a>5.8 TCP的拥塞控制</h2><h3 id="5-8-1-拥塞控制的一般原理"><a href="#5-8-1-拥塞控制的一般原理" class="headerlink" title="5.8.1 拥塞控制的一般原理"></a>5.8.1 拥塞控制的一般原理</h3><p>某段时间内，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况叫做<strong>拥塞</strong></p><p>所谓的<strong>拥塞控制</strong>就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载</p><p>拥塞控制是一个<strong>全局性</strong>的过程</p><p>当网络的<strong>吞吐量</strong>明显小于理想的<strong>吞吐量</strong>时，网络就进入<strong>轻度的拥塞状态</strong></p><p>当提供的负载达到某一数值时，网络的吞吐量反而随着提供的负载的增大而下降，这时网络就进入<strong>拥塞状态</strong></p><p>当提供的负载继续增大到某一数值时，吞吐量下降到0，这就是<strong>死锁</strong></p><p>从控制理论的角度看，分为<strong>开环控制</strong>和<strong>闭环控制</strong>两种方法</p><h3 id="5-8-2-TCP的拥塞控制方法"><a href="#5-8-2-TCP的拥塞控制方法" class="headerlink" title="5.8.2 TCP的拥塞控制方法"></a>5.8.2 TCP的拥塞控制方法</h3><p>TCP的拥塞控制方法有四种：<strong>慢开始</strong>、<strong>拥塞避免</strong>、<strong>快重传</strong>、<strong>快恢复</strong></p><p><strong>慢开始和拥塞避免</strong> </p><p>发送方维持一个叫做<strong>拥塞窗口cwnd</strong>的状态变量</p><p>判断网络拥塞的依据就是出现了超时</p><p>慢开始：由小到大逐渐增大发送窗口，也就是说由小到大逐渐增大拥塞窗口数值</p><p>拥塞窗口cwnd每次的增加量为$min(N,SMSS)$</p><p>每经过一个传输轮次，拥塞窗口cwnd就加倍</p><p>为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需设置一个<strong>慢开始门限ssthresh</strong></p><p><strong>拥塞避免</strong>算法的思路是上拥塞窗口cwnd缓慢地增大，即经过一个RTT就把cwnd加1</p><p>当出现超时时，新的ssthresh变成cwnd/2</p><p><strong>快重传</strong></p><p>采用快重传算法可以让发送方尽早知道发生了<strong>个别报文段的丢失</strong></p><p>比如接收方没有收到M3，但收到了M4，接收方会一直重复确认M2，直到收到M3为止</p><p><strong>快恢复</strong></p><p>发送方知道只是丢失了个别报文后，不启动慢开始，而是执行<strong>快恢复</strong>，发送方调整ssthresh为cwnd/2，同时设置cwnd=ssthresh，并开始执行<strong>拥塞避免算法</strong></p><p>一旦出现<strong>超时</strong>或<strong>3个重复的确认</strong>，就把门限ssthresh设置为当前cwnd的一半</p><p>注意点：<strong>超时后执行慢开始</strong>，<strong>3个重复确认后执行快重传</strong></p><p>在网络层，也可以使路由器采用适当的分组丢弃策略（如<strong>主动队列管理AQM</strong>），以减少网络拥塞的发生</p><h2 id="5-9-TCP的运输连接管理"><a href="#5-9-TCP的运输连接管理" class="headerlink" title="5.9 TCP的运输连接管理"></a>5.9 TCP的运输连接管理</h2><p>运输连接有三个阶段</p><ul><li>连接建立</li><li>数据传送</li><li>连接释放</li></ul><h3 id="5-9-1-TCP连接的建立"><a href="#5-9-1-TCP连接的建立" class="headerlink" title="5.9.1 TCP连接的建立"></a>5.9.1 TCP连接的建立</h3><p><strong>三次握手</strong></p><p>A到B： SYN=1，seq=x</p><p>B到A： SYN=1，ACK=1，seq=y，ack=x+1</p><p>A到B： ACK=1，seq=x+1，ack=y+1</p><p>为什么A最后还要发送一次确认？</p><p>防止已失效的连接请求报文突然又传送到了B，因而产生了错误</p><h1 id="第六章-应用层"><a href="#第六章-应用层" class="headerlink" title="第六章 应用层"></a>第六章 应用层</h1><h2 id="6-1-域名系统DNS"><a href="#6-1-域名系统DNS" class="headerlink" title="6.1 域名系统DNS"></a>6.1 域名系统DNS</h2><h3 id="6-1-1-域名系统概述"><a href="#6-1-1-域名系统概述" class="headerlink" title="6.1.1 域名系统概述"></a>6.1.1 域名系统概述</h3><p><strong>域名系统DNS</strong>是互联网使用的命名系统</p><p>域名到IP地址的解析是由分布在互联网上的许多<strong>域名服务器程序</strong>共同完成的。域名服务器程序在专设的节点上运行，而人们也常把运行域名服务器程序的机器称为<strong>域名服务器</strong></p><h3 id="6-1-2-互联网的域名结构"><a href="#6-1-2-互联网的域名结构" class="headerlink" title="6.1.2 互联网的域名结构"></a>6.1.2 互联网的域名结构</h3><p>互联网采用了<strong>层次树状</strong>结构的命名方式</p><p>任何一个连接在因特网上的主机或路由器，都有一个<strong>唯一</strong>的层次结构的名字，即<strong>域名</strong></p><p>每一个域名都由<strong>标号</strong>序列组成</p><h3 id="6-1-3-域名服务器"><a href="#6-1-3-域名服务器" class="headerlink" title="6.1.3 域名服务器"></a>6.1.3 域名服务器</h3><p>一个服务器负责管辖的范围叫<strong>区</strong></p><p>每一个区设置相应的<strong>权限域名服务器</strong>，用来保存该区中的所有主机的域名到IP地址的映射。</p><p>根据域名服务器所起的作用分为四种类型</p><ul><li>根域名服务器</li><li>顶级域名服务器</li><li>权限域名服务器</li><li>本地域名服务器</li></ul><p><strong>域名解析过程</strong></p><ol><li>主机向本地域名服务器的查询一般都是采用<strong>递归查询</strong>。如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份，向其他根域名服务器继续发出查询请求报文</li><li>本地域名服务器向根域名服务器的查询通常是采用<strong>迭代查询</strong>。当根域名服务器收到本地域名服务器的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询</li></ol><p>每个域名服务器都维护一个<strong>高速缓存</strong>，存放最近用过的名字以及如何从何处获得名字映射信息的记录</p><p>作用：可大大减轻根域名服务器的负荷，使因特网上的DNS查询请求和回答报文的数量大为减少</p><p><strong>网络运营商植入广告</strong></p><p>原因在于DNS被当地运营商劫持，DNS服务器掌握在运营商，因此运营商可以很轻易就在用户的电脑上插入广告。比如运营商可以让在用户登录时，让DNS向用户发出一个含有广告的网站。又或是当用户访问某个网站，就将用户要访问的网站嵌入到广告页面中。</p><h2 id="6-2-文件传送协议"><a href="#6-2-文件传送协议" class="headerlink" title="6.2 文件传送协议"></a>6.2 文件传送协议</h2><h3 id="6-2-1-FTP概述"><a href="#6-2-1-FTP概述" class="headerlink" title="6.2.1 FTP概述"></a>6.2.1 FTP概述</h3><p><strong>文件传送协议FTP</strong>是互联网上使用最广泛的文件传送协议</p><h3 id="6-2-2-FTP基本工作原理"><a href="#6-2-2-FTP基本工作原理" class="headerlink" title="6.2.2 FTP基本工作原理"></a>6.2.2 FTP基本工作原理</h3><p>FTP只提供文件传送的一些基本服务，它使用TCP可靠的运输服务</p><p>FTP的主要功能是减少或消除在不同操作系统下处理文件的<strong>不兼容性</strong></p><p>FTP使用<strong>客户服务器方式</strong></p><p>FTP的服务器进程由两大部分组成：一个<strong>主进程</strong>、若干个<strong>从属进程</strong></p><p>FTP两个从属进程：<strong>控制进程</strong>、<strong>数据传送进程</strong></p><p>FTP客户端和服务器之间要建立两个并行的TCP连接</p><h2 id="6-3-远程终端协议TELNET"><a href="#6-3-远程终端协议TELNET" class="headerlink" title="6.3 远程终端协议TELNET"></a>6.3 远程终端协议TELNET</h2><h2 id="6-4-万维网WWW"><a href="#6-4-万维网WWW" class="headerlink" title="6.4 万维网WWW"></a>6.4 万维网WWW</h2><h3 id="6-4-1-万维网概述"><a href="#6-4-1-万维网概述" class="headerlink" title="6.4.1 万维网概述"></a>6.4.1 万维网概述</h3><p>万维网是一个大规模的、联机式的信息储藏所</p><p>万维网是一个分布式的<strong>超媒体</strong>系统，它是<strong>超文本</strong>系统的扩充</p><h3 id="6-4-2-统一资源定位符URL"><a href="#6-4-2-统一资源定位符URL" class="headerlink" title="6.4.2 统一资源定位符URL"></a>6.4.2 统一资源定位符URL</h3><p>URL是用来表示从互联网上得到的资源位置和访问这些资源的方法</p><p>URL的一般形式由一下四个部分组成</p><p>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p><p>HTTP的默认端口号是<strong>80</strong></p><h3 id="6-4-3-超文本传送协议HTTP"><a href="#6-4-3-超文本传送协议HTTP" class="headerlink" title="6.4.3 超文本传送协议HTTP"></a>6.4.3 超文本传送协议HTTP</h3><p>HTTP是<strong>面向事务</strong>的应用层协议，它是万维网上能够可靠地交换文件的重要基础</p><p>HTTP虽然使用TCP作为传输层协议，但HTTP本身是<strong>无连接的</strong></p><p>HTTP是<strong>无状态的</strong></p><p>HTTP的报文结构：<strong>请求报文</strong>、<strong>响应报文</strong></p><p>请求行格式：<strong>方法、URL、版本</strong></p><p>响应行格式：<strong>版本、状态码、短语</strong></p><h2 id="6-5-电子邮件"><a href="#6-5-电子邮件" class="headerlink" title="6.5 电子邮件"></a>6.5 电子邮件</h2><h3 id="6-5-1-电子邮件概述"><a href="#6-5-1-电子邮件概述" class="headerlink" title="6.5.1 电子邮件概述"></a>6.5.1 电子邮件概述</h3><p>电子邮件的两个重要的标准就是：<strong>简单邮件传送协议SMTP</strong>、<strong>互联网文本报文格式</strong></p><p>一个电子邮件系统的三个主要组成构件：<strong>用户代理</strong>、<strong>邮件服务器</strong>、<strong>邮件发送协议和读取协议</strong></p><p>POP3是<strong>邮局协议</strong></p><p>从<strong>用户代理</strong>发送邮件到<strong>发送方服务器</strong>（SMTP协议/TCP连接）</p><p>从<strong>发送方服务器</strong>发送邮件到<strong>接收方服务器</strong>（SMTP协议/TCP连接）</p><p>从<strong>接收方服务器</strong>读取文件到<strong>用户代理</strong>（POP3协议/TCP连接）</p><h3 id="6-5-2-简单邮件传送协议SMTP"><a href="#6-5-2-简单邮件传送协议SMTP" class="headerlink" title="6.5.2 简单邮件传送协议SMTP"></a>6.5.2 简单邮件传送协议SMTP</h3><ol><li>建立连接</li><li>邮件传送</li><li>连接释放</li></ol><h2 id="6-6-动态主机配置DHCP"><a href="#6-6-动态主机配置DHCP" class="headerlink" title="6.6 动态主机配置DHCP"></a>6.6 动态主机配置DHCP</h2><p>互联网现在广泛使用的是<strong>动态主机配置协议DHCP</strong>,它提供了一种机制，称为<strong>即插即用连网</strong></p><p><strong>DHCP中继代理</strong>收到主机先以<strong>广播</strong>形式发送的<strong>发现报文</strong>后，就以<strong>单播</strong>形式向DHCP服务器转发报文</p>]]></content>
      
      
      <categories>
          
          <category> 文化课复习 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络实验期末复习</title>
      <link href="/2022/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络实验"><a href="#计算机网络实验" class="headerlink" title="计算机网络实验"></a>计算机网络实验</h1><p>相关仪器：cisco、wireshark</p><h2 id="实验1-传输介质"><a href="#实验1-传输介质" class="headerlink" title="实验1 传输介质"></a>实验1 传输介质</h2><p>有线传输介质：</p><ul><li>双绞线</li><li>光纤</li><li>同轴电缆</li></ul><p>无限传播介质</p><ul><li>无线电波</li><li>红外线</li></ul><p>双绞线制作标准：</p><ul><li><strong>568A</strong> 标准 白绿|绿|白橙|蓝|白蓝|橙|白粽|棕</li><li><strong>568B</strong> 标准 白橙|橙|白绿|蓝|白蓝|绿|白粽|棕</li></ul><p>直连线：两端都是568A或568B</p><p>交叉线：一端是568A，一端是568B</p><p>两台相同设备之间通讯通常用<strong>交叉线</strong>，两台不同设备之间通讯通常同<strong>直连线</strong></p><p>百兆网卡：四根芯线13，26传输数据</p><p>千兆网卡：八根芯线都传输数据</p><h2 id="实验2-DHCP"><a href="#实验2-DHCP" class="headerlink" title="实验2 DHCP"></a>实验2 DHCP</h2><p>TCP/IP五层模型：</p><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><p>DHCP优点：</p><ul><li>提高效率</li><li>便于管理</li><li>节约IP地址资源</li></ul><p>DHCP始终都是广播形式</p><p>DHCP四次交互：</p><ul><li>Discover 客户机请求IP</li><li>Offer       服务器响应</li><li>Request  客户机选择IP</li><li>Ack          服务器确认租约</li></ul><h2 id="实验3-DNS"><a href="#实验3-DNS" class="headerlink" title="实验3 DNS"></a>实验3 DNS</h2><p>域名解析过程：</p><ul><li>迭代查询     DNS服务器会提供客户机其他能够解析查询请求的DNS服务器</li><li>递归查询     DNS服务器必须使用一个准确地查询结果回复客户机</li></ul><p>DNS三种状态的原因：</p><ul><li>reply from …     可以解析域名并访问成功</li><li>Request timed out      可以解析域名，但不能访问成功</li><li>Unknown host  ….       解析域名失败</li></ul><h2 id="实验4-HTTP"><a href="#实验4-HTTP" class="headerlink" title="实验4 HTTP"></a>实验4 HTTP</h2><p>HTTP是超文本传输协议</p><p>Web服务器使用HTTP与客户机浏览器进行信息交流</p><p>目前主流的三个Web服务器：</p><ul><li>Apache</li><li>Nginx</li><li>IIs</li></ul><p>HTTP工作原理：</p><ol><li>客户端浏览器解析URL</li><li>客户端浏览器生产HTTP请求</li><li>服务器发送响应HTTP页面</li></ol><h2 id="实验5-交换机基本配置"><a href="#实验5-交换机基本配置" class="headerlink" title="实验5 交换机基本配置"></a>实验5 交换机基本配置</h2><p>用户模式：Switch&gt;</p><p>特权模式：Switch#</p><p>配置模式：Switch(config)#</p><p>vlan配置模式：Switch(config-vlan)#</p><p>接口配置模式：Switch(config-if)#</p><p>telnet配置：</p><ul><li><p>配置交换机管理IP</p><ul><li>interface vlan 1</li><li>ip address 192.168.1.1 255.255.255.0</li><li>no shutdown</li></ul></li><li><p>配置telnet密码</p><ul><li>line vty 0 4</li><li>password 123456</li><li>login</li></ul></li><li><p>配置特权模式密码</p><ul><li>enable password 123456</li></ul></li></ul><h2 id="实验6-交换机工作原理"><a href="#实验6-交换机工作原理" class="headerlink" title="实验6 交换机工作原理"></a>实验6 交换机工作原理</h2><p>Mac地址：又称物理地址，由48位二进制组成，前24位是厂商标识码，后24位是节点表示符</p><p>分类：</p><ul><li>单播  第一个字节的最低位为0，可作为目的地址和源地址</li><li>组播  第一个字节的最低位为1，仅能作为目的地址</li><li>广播  48位全部为1</li></ul><p>Mac地址表</p><ul><li>交换机内用于存放物理地址与交换机端口映射关系的数据库</li><li>交换机依据Mac地址表进行数据转发</li></ul><p>以太网帧：</p><ul><li>所谓数据帧就是数据链路层的协议数据单元，它包括三部分：帧头、数据部分、帧尾</li><li>在以太网链路上的数据单元称为以太网帧</li></ul><p>帧转发方式：</p><ul><li>直通转发</li><li>存储转发</li><li>无碎片直通转发</li></ul><p>将Mac地址与端口绑定：</p><ul><li>mac-address-table static xxxx.xxxx.xxxx vlan 1 interface 0/1 </li></ul><p>解除绑定：</p><ul><li>no mac-address-table static xxxx.xxxx.xxxx vlan 1 interface 0/1 </li></ul><h2 id="实验7-交换机Vlan"><a href="#实验7-交换机Vlan" class="headerlink" title="实验7 交换机Vlan"></a>实验7 交换机Vlan</h2><p>交换网络是平面网络结构，必须依赖广播</p><p>Vlan：虚拟局域网</p><p>Vlan特点：</p><ul><li>基于逻辑的分组，不受物理位置的限制</li><li>在同一Vlan内和真实局域网相同</li><li>不同Vlan内用户主要通信需要借助三层设备</li></ul><p>交换机的端口：</p><ul><li>Access端口<ul><li>只能属于一个Vlan</li><li>一般用于连接计算机的接口</li></ul></li><li>Trunk端口<ul><li>允许多个Vlan通过</li><li>一般用于交换机之间连接的端口</li></ul></li></ul><p>Vlan配置：</p><ul><li><p>创建vlan </p><ul><li>vlan vlan-id</li></ul></li><li><p>删除vlan </p><ul><li>no vlan vlan-id</li></ul></li><li><p>查看vlan</p><ul><li>show vlan brief</li></ul></li><li><p>向vlan内添加一个端口</p><ul><li>interface interface-id</li><li>switchport mode access</li><li>switchport access vlan-id</li></ul></li><li><p>向vlan内添加一组端口</p><ul><li>interface range port-range</li><li>switchport mode access</li><li>switchport access vlan-id</li></ul></li><li><p>将端口设置为vlan端口</p><ul><li>interface interface-id</li><li>switchport mode trunk</li></ul></li><li><p>查看trunk端口</p><ul><li>show interface trunk</li></ul></li></ul><h2 id="实验9-静态路由"><a href="#实验9-静态路由" class="headerlink" title="实验9 静态路由"></a>实验9 静态路由</h2><p>路由器是连接两个或多个网络的硬件设备，在网络间起网关作用</p><ul><li>直连网络<ul><li>直接接在某个路由器上的网络，称为该路由器的直连网络</li><li>每个路由器接口的IP作为直连网络网关</li></ul></li></ul><p>路由表：</p><ul><li>路由器就是依靠路由表来选择转发路径</li><li>路由表中包含该路由器掌握的所有目的网络地址，以及通过此路由器到达这些网络中最佳路径，这个最佳路径指的是路由器的某个接口或下一条路由器的地址</li></ul><p>静态路由：由系统管理员事先设置好固定的路由信息</p><ul><li>优点：简单、高效、可靠</li><li>缺点：不能动态适用网络状态变化</li></ul><p>动态路由：路由器根据网络系统的运行情况而自动调整的路由信息</p><ul><li>优点：动态路由可以自动学习网络的拓扑结构，并更新路由表</li><li>缺点：路由广播更新信息将占据大量的网络带宽</li></ul><p>路由器配置</p><ul><li><p>配置接口IP作为连接网络的网关</p><ul><li>interface interface-id</li><li>ip address ip-address mask</li><li>no shutdown</li></ul></li><li><p>配置静态路由</p><ul><li>ip route prefix mask ip-address</li></ul></li><li><p>查看路由信息</p><ul><li>show ip route</li></ul></li></ul><p>通过192.168.2.2的端口访问所有24位子网掩码的目的网络：</p><ul><li>ip route 0.0.0.0 255.255.255.0 192.168.2.2</li></ul><p>通过192.168.2.2的端口访问所有网络：</p><ul><li>ip route 0.0.0.0 0.0.0.0 192.168.2.2</li></ul><h2 id="实验10-Vlan间通信"><a href="#实验10-Vlan间通信" class="headerlink" title="实验10 Vlan间通信"></a>实验10 Vlan间通信</h2><p>Vlan是广播域（二层概念），而两个广播域之间的通信通常由路由器连接，广播域之间来往的数据包都是由路由转发（三层概念）的</p><p>路由功能主要由<strong>路由器</strong>和<strong>三层交换机</strong>提供</p><p>Vlan间通信一般包括三种实施方案：</p><ul><li>路由器多端口方式<ul><li>为路由器端口设置一个IP地址作为对应Vlan的网关，有几个Vlan就需要在几个端口设置IP地址</li><li>实际应用很少<ul><li>一般中大型局域网，Vlan数量很多而路由器端口很少</li><li>路由器采用软件对IP报文进行转发，占用CPU和内存资源，效率比较低</li></ul></li></ul></li><li>单臂路由方式<ul><li>在路由器的一个物理接口配置多个子接口，作为不同Vlan的默认网关</li><li>缺点<ul><li>路由器转发速度有限，无法满足Vlan间通信数据量较大的需求，并且容易造成单点故障</li><li>数据在物理链路上往返运输，存在转发延迟</li></ul></li><li>进入子接口、封装802.1Q并指定Vlan ID号，配置IP地址：<ul><li>interface number.subinterface-number</li><li>encapsulation dot1q vlan-id</li><li>ip address ip-address mask</li></ul></li></ul></li><li>三层交换机方式<ul><li>三层交换机实现Vlan间通信的方法是在已有的Vlan上创建虚拟接口，它同样可以配置IP地址，借助虚拟接口三层交换机能够实现路由转发</li><li>优点<ul><li>Vlan间流量不经过路由器，网络延时和抖动都很小，同时极大减轻上层接入路由器的负载</li><li>三层交换机的Vlan间路由由交换机三层转发引擎完成，可以获得很好的性能</li></ul></li><li>三层交换机配置<ul><li>vlan vlan-id （创建Vlan）</li><li>interface interface-id （向Vlan内添加端口）</li><li>switchport access vlan vlan-id</li><li>interface vlan-id （配置SVI）</li><li>ip address ip-address mask</li><li>ip routing （开启路由功能）</li></ul></li></ul></li></ul><h2 id="实验11-动态路由RIP"><a href="#实验11-动态路由RIP" class="headerlink" title="实验11 动态路由RIP"></a>实验11 动态路由RIP</h2><p>动态路由分类</p><ul><li><p>按照使用的区域不同</p><ul><li>内部网关协议IGP域内协议，如RIP、OSPF、ISIS</li><li>外部网关协议EGP域间协议，如BGP</li></ul></li><li><p>按照算法不同</p><ul><li>距离矢量协议，如RIPV1、RIPV2、BGP</li><li>链路状态路由协议，如OSPF、ISIS</li></ul></li><li><p>按是否携带子网掩码</p><ul><li>有类路由协议，如RIPV1</li><li>无类路由协议，如RIPV2、OSPF、ISIS、BGP</li></ul></li></ul><p>RIP是一种基于<strong>距离矢量</strong>算法协议，它使用<strong>跳数</strong>作为度量值来衡量到达目的地址的距离</p><p>RIPV1</p><ul><li>使用广播的方式发送路由更新</li><li>路由更新信息中不携带子网掩码</li><li>不支持认证</li></ul><p>RIPV2</p><ul><li>发送更新报文的方式为组播</li><li>路由信息中加入子网掩码</li><li>支持认证</li></ul><p>RIP配置</p><ul><li><p>启动RIP进程</p><ul><li>router rip</li></ul></li><li><p>定义关联网络</p><ul><li>network network-number</li></ul></li><li><p>定义RIP版本</p><ul><li>version {1 | 2}</li></ul></li><li><p>关闭自动汇总（v2）</p><ul><li>no auto-summary</li></ul></li><li><p>查看路由更新过程</p><ul><li>debug ip rip</li></ul></li><li><p>查看路由信息</p><ul><li>show ip route</li><li>show ip rip database</li><li>show ip protocols</li></ul></li><li><p>清空路由信息</p><ul><li>clear ip route *</li></ul></li></ul><h2 id="实验12-NAT"><a href="#实验12-NAT" class="headerlink" title="实验12 NAT"></a>实验12 NAT</h2><p>NAT</p><ul><li><p>网络地址转化</p></li><li><p>它是一种把内部私有地址翻译成合法网络IP地址的技术</p></li></ul><p>NAT分类</p><ul><li><p>静态NAT</p><ul><li>按照一一对应的方式将每个内部IP地址转换为一个外部IP地址，这种方式经常用于企业网的内部设备需要能够被外部网络访问到时</li></ul></li><li><p>动态NAT</p><ul><li>将内部IP地址动态转化为一组外部IP地址（地址池）中的一个IP地址</li></ul></li><li><p>超载NAT（NAPT）</p><ul><li>利用不同端口号将多个内部IP地址转化为一个外部IP地址</li></ul></li></ul><p><strong>静态NAT配置</strong></p><ul><li><p>指定一个内部接口和一个外部接口</p><ul><li>ip nat {inside | outside}</li></ul></li><li><p>配置静态转换条目（IP和端口）</p><ul><li>ip nat inside source static tcp local-ip local-port global-ip global-port</li></ul></li></ul><p><strong>动态NAT配置</strong></p><ul><li><p>指定一个内部接口和一个外部接口</p><ul><li>ip nat {inside | outside}</li></ul></li><li><p>定义IP访问控制列表</p><ul><li>access-list access-list-number permit any</li></ul></li><li><p>定义一个地址池</p><ul><li>ip nat pool pool-name start-ip end-ip netmask netmask</li></ul></li><li><p>配置动态转换条目</p><ul><li>ip nat inside source list access-list-number pool pool-number</li></ul></li><li><p>查看NAT信息</p><ul><li>show ip nat statistics</li><li>show ip nat translations</li></ul></li></ul><p><strong>NAPT配置</strong></p><ul><li><p>指定一个内部接口和一个外部接口</p><ul><li>ip nat {inside | outside}</li></ul></li><li><p>定义IP访问控制列表</p><ul><li>access-list access-list-number permit any</li></ul></li><li><p>定义一个地址池</p><ul><li>ip nat pool pool-name start-ip end-ip netmask netmask</li></ul></li><li><p>配置动态转换条目</p><ul><li>ip nat inside source list access-list-number pool pool-number overload</li></ul></li></ul><h2 id="实验13-ARP协议分析"><a href="#实验13-ARP协议分析" class="headerlink" title="实验13 ARP协议分析"></a>实验13 ARP协议分析</h2><p>ARP即地址解析协议，主要用于根据IP地址求出主机对应的物理地址</p><p>在网络通信中，主机和主机之间的通信需要根据 OSI 模型进行数据包的封装和解封装，这里面不仅需要封装<strong>源目的 IP 地址</strong>，也需要<strong>源目的 MAC 地址</strong>。</p><p>ARP工作原理：</p><ul><li><p>发送request通过IP地址询问MAC地址</p></li><li><p>接收reply得到MAC地址并存在缓存中</p></li><li><p>arp -a</p><ul><li>查看ARP缓存表中的内容</li></ul></li><li><p>arp -d</p><ul><li>清除ARP缓存</li></ul></li></ul><h2 id="实验14-TCP协议分析"><a href="#实验14-TCP协议分析" class="headerlink" title="实验14 TCP协议分析"></a>实验14 TCP协议分析</h2><p><strong>TCP和UDP</strong></p><table><thead><tr><th align="center"></th><th align="center">UDP</th><th align="center">TCP</th></tr></thead><tbody><tr><td align="center">是否连接</td><td align="center">无连接</td><td align="center">面向连接</td></tr><tr><td align="center">是否可靠</td><td align="center">不可靠传输，不使用流量控制和拥塞控制</td><td align="center">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="center">连接对象个数</td><td align="center">支持一对一，一对多，多对一和多对多交互通信</td><td align="center">只能一对一</td></tr><tr><td align="center">传输方式</td><td align="center">面向报文</td><td align="center">面向字节流</td></tr><tr><td align="center">首部开销</td><td align="center">首部开销小，仅8字节</td><td align="center">首部最小20字节，最大60字节</td></tr><tr><td align="center">使用场景</td><td align="center">适用于实时应用（IP电话、视频会议、直播等）</td><td align="center">适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table><p>TCP报文格式：<br><img src="https://img-blog.csdnimg.cn/8790a86f3f9f4bacaf2c8bc9aab66c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAa2FrYTAwMTA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>TCP三次握手</strong></p><ol><li><p>客户端向服务器发送一个SYN段，该段中包含客户端的初始序列号Sequence number = x</p></li><li><p>服务器返回客户端 SYN +ACK 段， 该段中包含服务器的初始序列号Sequence number = y；同时使 Acknowledgment number = x+1来表示确认已收到客户端的 SYN段</p></li><li><p>客户端给服务器响应一个ACK段，该段中使 Acknowledgment number = y + 1来表示确认已收到服务器的 SYN段</p></li></ol><p><strong>TCP的四次挥手</strong></p><ol><li>客户端A发送一个FIN段，用来关闭客户A到服务器B的数据传送，Sequence number = u</li><li>服务器B收到这个FIN,它发回一个ACK, Acknowledgment number = u+1 </li><li>服务器B关闭与客户端A的连接，发送一个FIN给客户端A，Sequence number = w</li><li>客户端A发回ACK报文确认， Acknowledgment number = w+1 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 文化课复习 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021ICPC沈阳游记及2021年度总结</title>
      <link href="/2021/11/23/2021ICPC%E6%B2%88%E9%98%B3%E6%B8%B8%E8%AE%B0%E5%8F%8A2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2021/11/23/2021ICPC%E6%B2%88%E9%98%B3%E6%B8%B8%E8%AE%B0%E5%8F%8A2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这场打完基本上就进入半退役状态了，已经是大三老人了。作为图论选手居然没写出tarjan割边的银牌题（我们几乎要拿银了，不是吗？）。</p><p>退役的小作文留到明年在写吧，先留个坑。三年的acm生涯基本上告一段落了，还剩一场南京的打星、明年icpc昆明和浙江省赛。</p><h1 id="关于我的2021"><a href="#关于我的2021" class="headerlink" title="关于我的2021"></a>关于我的2021</h1><p>2021可以说是喜忧参半的一年吧，比起不堪回首的2020还是好了不少的。</p><p>先放个数据对比去年和今年</p><h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><table><thead><tr><th>比赛</th><th>奖牌</th></tr></thead><tbody><tr><td>浙江省赛</td><td>铁</td></tr><tr><td>CCPC 威海</td><td>铁</td></tr><tr><td>ICPC 上海</td><td>铁</td></tr><tr><td>ICPC 济南</td><td>铁</td></tr><tr><td>校赛</td><td>三等奖</td></tr></tbody></table><h2 id="2021（目前为止）"><a href="#2021（目前为止）" class="headerlink" title="2021（目前为止）"></a>2021（目前为止）</h2><table><thead><tr><th>比赛</th><th>奖牌</th></tr></thead><tbody><tr><td>浙江省赛</td><td>铜</td></tr><tr><td>ICPC 西安邀请赛</td><td>铜</td></tr><tr><td>CCPC 桂林</td><td>铜</td></tr><tr><td>ICPC 沈阳</td><td>铜</td></tr><tr><td>校赛</td><td>一等奖rk3</td></tr></tbody></table><p>同时将两个codeforces账号打上蓝名<br><del>cf的阴间比赛时间还是不太适应</del><br><img src="https://img-blog.csdnimg.cn/e5c74c057cba4b52b005dc16bac37b12.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c31188e71a124b13a25513c225bef83c.png" alt="在这里插入图片描述"></p><p>按照时间线写</p><h3 id="校赛"><a href="#校赛" class="headerlink" title="校赛"></a>校赛</h3><p>这应该是今年第一场算是正式的比赛，凭借点分治勇夺rk3，但没做出错排问题属实是脑瘫了。这场之后算是积累了一些自信吧，也让我从盲目刷算法题到思维题优先的过渡。</p><h3 id="省赛"><a href="#省赛" class="headerlink" title="省赛"></a>省赛</h3><p>在2020年怒拿4铁之后（<del>再也不信事不过三</del>） ，总算在省赛拿铜了，虽然经历了太多，指一小时4题四小时还是4题这件事。也是这场比赛让我意识到读题准确性是有多么重要，从这之后所有比赛读题至少有两人确认题意。</p><p>虽然是第一次拿铜，但还是有些失落，看着拿银奖的学长还是满眼羡慕的。<br><img src="https://img-blog.csdnimg.cn/3a6a049408c04bbf9749acbd37ea7d07.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAa2FrYTAwMTA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这曲线属实是蚌埠住了。</p><h3 id="ICPC西安邀请赛"><a href="#ICPC西安邀请赛" class="headerlink" title="ICPC西安邀请赛"></a>ICPC西安邀请赛</h3><p>赛前校内选拔了一波，我们队以校排第三赶上末班车，还是挺幸运的吧。</p><p>说起来这也是第一次线下赛的经历，也算是梦开始的地方吧，20小时绿皮火车来回的经历还是历历在目的，幸好去了三个队伍，一路上欢声笑语没那么无聊。那天中午赶到场馆里拿了物资，然后去到招待所休息。晚上逛了一下西北工业大学的校园，整体还是非常满意的，从住宿到餐饮主办方都非常细心。</p><p>正赛那天还是挺紧张的，不过半小时后就进入状态了。赛中被一道期望题卡了很久，好在后来队友做出来了，最后我调了近1个小时的线段树+dp也过了，算是稳住铜牌了。其实还是挺有机会拿银的，后面有个链表暴力题没想出来不太应该。好在是拿牌了，还经历了一次线下的颁奖，氛围非常不错。</p><h3 id="暑假集训"><a href="#暑假集训" class="headerlink" title="暑假集训"></a>暑假集训</h3><p>大约持续了2个月，这也是经历的第二次暑假集训了，每天基本上就是寝室-实验室-寝室，一周六天，一天12小时。大多数人会非常不理解这样的集训，但只有身处其中才能体会到当中的乐趣吧。反正被牛客多校和杭电多校虐了两个月之后，不说变强，抗打击能力应该强了不少吧。</p><h3 id="CCPC桂林"><a href="#CCPC桂林" class="headerlink" title="CCPC桂林"></a>CCPC桂林</h3><p>具体细节<a href="https://ricar0.github.io/2021/11/08/2021CCPC%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/#more">点这里</a><br>这也是我第一块CCPC的奖牌，虽然是铜牌，但在众多强队中夺到奖牌也算是不容易了。</p><h3 id="ICPC沈阳"><a href="#ICPC沈阳" class="headerlink" title="ICPC沈阳"></a>ICPC沈阳</h3><p>博弈沈阳大失败！发现自己赛季前仔细分析，疯狂博弈，最后进入最卷的两场，真是博弈了个寂寞。而且赛前vp了好多场沈阳历年的比赛都是惨痛的回忆，就这样一直在惶恐之中开始比赛。</p><p>热身赛题目基本全见过，10分钟过三题后开始挂机。<br>正赛开局还是很顺的，4分钟1A签到后，同时发现BF都有人过，F队友过出题意之后就自己去写了，我先是开的L题，感觉就是dp+容斥？然后丢着先不写了，队友马上A出F题之后，一起看B。当时感觉有点被B绕进去了，赶紧和队友交换了一下题意，发现B好像可以按位直接算贡献，接着88min1A。然后发现J不就是个bfs的暴力题吗，写完后造个数据发现跑的慢的要死。队友开始说服我剪枝的做法，我突然发现好像可以预处理然后直接输出，这时139min1A。前4题都是1A，铜牌应该很稳了。但dp+容斥确实都不太擅长，因此我们双开H和I。H题意有些绕，大概花了1个小时才想到边双连通，后面操作有些变形，开始想复杂了，先缩点变成树，然后树上DP….，另一个队友化简I到一个三元方程组，然后求出无穷多解后不知道该怎么算？？就这样，最后3个小时也没写出一道银牌题，遗憾退场。</p><p>赛后发现这个H怎么和多校一个题这么像，多校是割点，这是割边….</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>今年应该会在遗憾中结束吧，没能拿到银牌，没能打一场ec。但换个角度，今年拿到人生中第一块省赛奖牌，第一块邀请赛奖牌，第一块CCPC奖牌，第一块ICPC奖牌…</p><p>以下的话写给学弟们以及还在努力为了奖牌奋斗的acmer</p><p>总有人问acm能给你带来什么?<br>是一份华丽offer？是扎实的算法基础和代码能力？还是不断追求目标的满足感？<br>我想你在加入之前心里就已经有答案了，或者说没有答案的人也不会走到今天。大学的时间真的过的很快，加入实验室以来已经两年了，最开始我也是一个懵懂无知的少年，在大学前对信息竞赛只是停留在听说的层面。但只有你真正接触信息竞赛，真正为之付出过汗水和努力，才能在收获时获得偌大的幸福感和满足感。毕竟在大学找到真正有趣的东西非常难，我不相信有人会喜欢枯燥乏味的理论课，听无聊的讲座，因此，给acm一个机会，acm也会给你机会。</p><p>给自己明年ICPC昆明和省赛加个油，希望拿个银牌退役。</p><p><strong>by 一个普通的ACMer</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 赛后记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛后记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Weiler-Atherton算法】 计算机图形学多边形裁剪算法</title>
      <link href="/2021/11/16/%E3%80%90Weiler-Atherton%E7%AE%97%E6%B3%95%E3%80%91-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%A4%9A%E8%BE%B9%E5%BD%A2%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/"/>
      <url>/2021/11/16/%E3%80%90Weiler-Atherton%E7%AE%97%E6%B3%95%E3%80%91-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%A4%9A%E8%BE%B9%E5%BD%A2%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>源代码：<a href="https://github.com/ricar0/Weiler-Atherton-Alogrithm/tree/master">https://github.com/ricar0/Weiler-Atherton-Alogrithm/tree/master</a></p><h1 id="什么是多边形裁剪"><a href="#什么是多边形裁剪" class="headerlink" title="什么是多边形裁剪"></a>什么是多边形裁剪</h1><p>通常来说就是利用多边形来裁剪多边形的一种方法，一般情况下是利用矩形来裁剪凹凸多边形</p><ol><li>凸多边形<br><img src="https://img-blog.csdnimg.cn/b19368c7a97744c1b3d95e1ed6b1a89f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAa2FrYTAwMTA=,size_13,color_FFFFFF,t_70,g_se,x_16"></li><li>凹多边形<br><img src="https://img-blog.csdnimg.cn/b9b0d9ba3ec742cc87149f9810cc398c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAa2FrYTAwMTA=,size_15,color_FFFFFF,t_70,g_se,x_16"><br>上面红色划线部分就是裁剪出的部分</li></ol><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ol><li>OPENGL基础语法<br>基本上就是一些画线和画多边形的操作，难度较低</li><li>求两直线交点<br>较为基础的数学知识</li><li>求一个点是否落在多边形内/外<br>计算几何知识</li><li>Weiler-Atherton多边形裁剪算法</li></ol><p>这里着重介绍Weiler-Atherton算法，其余不懂的可以先学会再看。</p><h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol><li>首先绘制两个相交的多边形</li><li>对于多边形1，我们从一个点出发，将所有经过的点（包含交点）存入新的数组中，对于多边形2也是同理</li><li>对两个新数组中的相同点进行点对映射</li><li>开始对裁剪多边形1进行遍历，从任意点出发，如果改点将从多边形2的内部穿越到外部，我们改变遍历点的对象，从多边形2开始遍历，依次类推…</li><li>直到当前点被遍历过，那么之前肯定形成了一个回路，我们将当前回路绘制出来就是裁剪出的多边形。</li><li>一直重复4和5操作，直到所有点都被遍历</li></ol><p>接下来结合图片解释一下</p><p><img src="https://img-blog.csdnimg.cn/40caac91a1cc41deb7e1bae01818d309.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAa2FrYTAwMTA=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对于如下这个图，我们利用矩形裁剪凹多边形。<br>首先从E点出发，判断E到J是否为出点，发现不是。遍历到J点，判断JF是否是出点，发现是，这时候改变遍历的对象，通过映射关系从K点开始。判断发现KC又是出点，因此再次改变遍历对象，遍历多边形到E，发现J已经被遍历过，这时直接绘制出JKE…</p><h1 id="程序框图"><a href="#程序框图" class="headerlink" title="程序框图"></a>程序框图</h1><p><img src="https://img-blog.csdnimg.cn/c14beb0439894fa0861fae9c81c22f9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAa2FrYTAwMTA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>建立窗口以及自动调整大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_PROJECTION);</span><br><span class="line">    <span class="built_in">glLoadIdentity</span>();</span><br><span class="line">    <span class="built_in">gluPerspective</span>(<span class="number">60.0</span>, (GLfloat)w / (GLfloat)h, <span class="number">0.1</span>, <span class="number">100000.0</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_MODELVIEW);</span><br><span class="line">    <span class="built_in">glLoadIdentity</span>();</span><br><span class="line">    <span class="built_in">gluLookAt</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>**&gt;(argv));</span><br><span class="line">    <span class="built_in">glutInitDisplayMode</span>(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">    <span class="comment">// 初始化窗口</span></span><br><span class="line">    <span class="built_in">glutInitWindowSize</span>(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">    <span class="built_in">glutInitWindowPosition</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">glutCreateWindow</span>(argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">glutReshapeFunc</span>(reshape);</span><br><span class="line">    <span class="built_in">glutDisplayFunc</span>(display);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glutMainLoop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>建立点和线</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point2d</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point2d &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x==rhs.x) <span class="keyword">return</span> y &lt; rhs.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point2d start;</span><br><span class="line">    Point2d end;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>求两条线段交点的模板，如果不存在返回-inf</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> Point2d <span class="title">Vector</span><span class="params">(Point2d a, Point2d b)</span> </span>&#123;  <span class="comment">//向量ab</span></span><br><span class="line">    <span class="keyword">return</span>&#123; b.x - a.x, b.y - a.y &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis2</span><span class="params">(Point2d a, Point2d b)</span> </span>&#123;          <span class="comment">//两点间的距离的平方</span></span><br><span class="line">    <span class="keyword">return</span> (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point2d A, Point2d B, Point2d P)</span> </span>&#123;  <span class="comment">//向量的外积</span></span><br><span class="line">    Point2d AB = <span class="built_in">Vector</span>(A,B);</span><br><span class="line">    Point2d AP = <span class="built_in">Vector</span>(A,P);</span><br><span class="line">    <span class="keyword">return</span> AB.x*AP.y - AB.y*AP.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point2d A, Point2d B, Point2d P)</span> </span>&#123;     <span class="comment">//向量的内积</span></span><br><span class="line">    Point2d AB = <span class="built_in">Vector</span>(A,B);</span><br><span class="line">    Point2d AP = <span class="built_in">Vector</span>(A,P);</span><br><span class="line">    <span class="keyword">return</span> AB.x*AP.x + AB.y*AP.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dir</span><span class="params">(Point2d A, Point2d B, Point2d P)</span> </span>&#123;    <span class="comment">//点与线段方位判定</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cross</span>(A, B, P) &gt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">cross</span>(A, B, P)&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">dot</span>(A, B, P) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">dot</span>(A, B, P) &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dis2</span>(A, B) &lt; <span class="built_in">dis2</span>(A, P)) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disLine</span><span class="params">(Point2d A, Point2d B, Point2d P)</span> </span>&#123;   <span class="comment">//点P到直线AB的距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">cross</span>(A, B, P)) / <span class="built_in">sqrt</span>(<span class="built_in">dis2</span>(A, B));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point2d <span class="title">intersection</span><span class="params">(Line u, Line v)</span> </span>&#123;</span><br><span class="line">    Point2d A1 = u.start;</span><br><span class="line">    Point2d A2 = u.end;</span><br><span class="line">    Point2d B1 = v.start;</span><br><span class="line">    Point2d B2 = v.end;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dir</span>(A1, A2, B1)*<span class="built_in">dir</span>(A1, A2, B2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">dir</span>(B1, B2, A1)*<span class="built_in">dir</span>(B1, B2, A2) &lt;= <span class="number">0</span>) &#123;<span class="comment">//判断有无交点</span></span><br><span class="line">        <span class="keyword">double</span> t = <span class="built_in">disLine</span>(A1, A2, B1) / (<span class="built_in">disLine</span>(A1, A2, B1) + <span class="built_in">disLine</span>(A1, A2, B2));</span><br><span class="line">        Point2d B1B2 = <span class="built_in">Vector</span>(B1, B2);</span><br><span class="line">        Point2d inter = &#123; B1.x + B1B2.x*t, B1.y + B1B2.y*t &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;inter.x, inter.y&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;-inf, -inf&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求两点距离，用于排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Point2d point1, Point2d point2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((point1.x-point2.x)*(point1.x-point2.x) + (point1.y-point2.y)*(point1.y-point2.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断点是否落在多边形内，这里加了个误差0.001</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPointInsidePoly</span><span class="params">(Point2d P,<span class="keyword">const</span> vector&lt;Point2d&gt;&amp; polyVertices)</span> </span>&#123;</span><br><span class="line">    std::<span class="keyword">size_t</span> vertCount = polyVertices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (vertCount &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Point2d tmp = P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">2</span>; l++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">2</span>; r++) &#123;</span><br><span class="line">            P = tmp;</span><br><span class="line">            <span class="keyword">if</span> (l % <span class="number">2</span>) P.x += <span class="number">0.001</span>;</span><br><span class="line">            <span class="keyword">else</span> P.x -= <span class="number">0.001</span>;</span><br><span class="line">            <span class="keyword">if</span> (r % <span class="number">2</span>) P.y += <span class="number">0.001</span>;</span><br><span class="line">            <span class="keyword">else</span> P.y -= <span class="number">0.001</span>;</span><br><span class="line">            <span class="keyword">bool</span> inside = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">1</span>; i &lt;= vertCount; ++i) &#123;</span><br><span class="line">                <span class="keyword">const</span> Point2d &amp;A = polyVertices[i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">const</span> Point2d &amp;B = polyVertices[i % vertCount];</span><br><span class="line">                <span class="keyword">if</span> ((B.y &lt;= P.y &amp;&amp; P.y &lt; A.y) || (A.y &lt;= P.y &amp;&amp; P.y &lt; B.y)) &#123;</span><br><span class="line">                    <span class="keyword">double</span> t = (P.x - B.x) * (A.y - B.y) - (A.x - B.x) * (P.y - B.y);</span><br><span class="line">                    <span class="keyword">if</span> (A.y &lt; B.y)</span><br><span class="line">                        t = -t;</span><br><span class="line">                    <span class="keyword">if</span> (t &lt; <span class="number">0</span>)</span><br><span class="line">                        inside = !inside;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (inside) <span class="keyword">return</span> inside;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求交点以及重新放入数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getIntersections</span><span class="params">()</span> </span>&#123;<span class="comment">//求出所有交点以及按照顺序存放在新数组中</span></span><br><span class="line">    <span class="keyword">int</span> len1 = poly1.<span class="built_in">size</span>();<span class="comment">//求出new1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        new1.<span class="built_in">push_back</span>(poly1[i]);</span><br><span class="line">        vector&lt;Point2d&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it2 : p2) &#123;</span><br><span class="line">            Point2d p = <span class="built_in">intersection</span>(&#123;&#123;poly1[i].x, poly1[i].y&#125;,&#123;poly1[(i+<span class="number">1</span>)%len1].x, poly1[(i+<span class="number">1</span>)%len1].y&#125;&#125;, it2);</span><br><span class="line">            <span class="keyword">if</span> (p.x != -inf &amp;&amp; p.y != -inf) tmp.<span class="built_in">push_back</span>(&#123;p.x, p.y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), [&amp;](Point2d p1, Point2d p2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">dis</span>(p1, poly1[i]) &lt; <span class="built_in">dis</span>(p2, poly1[i]);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : tmp) new1.<span class="built_in">push_back</span>(it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len2 = poly2.<span class="built_in">size</span>();<span class="comment">//求出new2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++) &#123;</span><br><span class="line">        new2.<span class="built_in">push_back</span>(poly2[i]);</span><br><span class="line">        vector&lt;Point2d&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it2 : p1) &#123;</span><br><span class="line">            Point2d p = <span class="built_in">intersection</span>(&#123;&#123;poly2[i].x, poly2[i].y&#125;,&#123;poly2[(i+<span class="number">1</span>)%len2].x, poly2[(i+<span class="number">1</span>)%len2].y&#125;&#125;, it2);</span><br><span class="line">            <span class="keyword">if</span> (p.x != -inf &amp;&amp; p.y != -inf) tmp.<span class="built_in">push_back</span>(&#123;p.x, p.y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), [&amp;](Point2d p1, Point2d p2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">dis</span>(p1, poly2[i]) &lt; <span class="built_in">dis</span>(p2, poly2[i]);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : tmp) new2.<span class="built_in">push_back</span>(it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; new1.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//映射关系，给定eps为误差范围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; new2.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(new1[i].x-new2[j].x)&lt;eps&amp;&amp;<span class="built_in">fabs</span>(new1[i].y-new2[j].y)&lt;eps) &#123;</span><br><span class="line">                pos1[i] = j;</span><br><span class="line">                pos2[j] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制两个多边形以及初始化操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p1.<span class="built_in">clear</span>();</span><br><span class="line">    p2.<span class="built_in">clear</span>();</span><br><span class="line">    new1.<span class="built_in">clear</span>();</span><br><span class="line">    new2.<span class="built_in">clear</span>();</span><br><span class="line">    vis1.<span class="built_in">clear</span>();</span><br><span class="line">    vis2.<span class="built_in">clear</span>();</span><br><span class="line">    pos1.<span class="built_in">clear</span>();</span><br><span class="line">    pos2.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">prework</span>();<span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="built_in">glBegin</span>(GL_LINES);</span><br><span class="line">    <span class="built_in">glColor3f</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">int</span> len1 = poly1.<span class="built_in">size</span>();<span class="comment">//绘制多边形</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        <span class="built_in">glVertex2f</span>(poly1[i].x, poly1[i].y);</span><br><span class="line">        <span class="built_in">glVertex2f</span>(poly1[(i+<span class="number">1</span>)%len1].x, poly1[(i+<span class="number">1</span>)%len1].y);</span><br><span class="line">        p1.<span class="built_in">push_back</span>(&#123;&#123;poly1[i].x, poly1[i].y&#125;, &#123;poly1[(i+<span class="number">1</span>)%len1].x, poly1[(i+<span class="number">1</span>)%len1].y&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len2 = poly2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++) &#123;</span><br><span class="line">        <span class="built_in">glVertex2f</span>(poly2[i].x, poly2[i].y);</span><br><span class="line">        <span class="built_in">glVertex2f</span>(poly2[(i+<span class="number">1</span>)%len2].x, poly2[(i+<span class="number">1</span>)%len2].y);</span><br><span class="line">        p2.<span class="built_in">push_back</span>(&#123;&#123;poly2[i].x, poly2[i].y&#125;, &#123;poly2[(i+<span class="number">1</span>)%len2].x, poly2[(i+<span class="number">1</span>)%len2].y&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">getIntersections</span>();</span><br><span class="line">    <span class="built_in">glEnd</span>();</span><br><span class="line">    <span class="built_in">glFlush</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最核心的代码，遍历两个多边形</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Point2d&gt; now;<span class="comment">//当前选择到的点</span></span><br><span class="line">    <span class="keyword">int</span> len1 = new1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> len2 = new2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; new1.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//new1 第一个新多边形 new2第一个新多边形</span></span><br><span class="line">        <span class="keyword">if</span> (vis1[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> ch = <span class="number">1</span>, nowpos = i;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="number">1</span>) &#123;<span class="comment">//遍历第一个多边形</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isPointInsidePoly</span>(new1[nowpos], poly2)) now.<span class="built_in">push_back</span>(new1[nowpos]);</span><br><span class="line">                <span class="keyword">if</span> (vis1[nowpos]) &#123;<span class="comment">//如果该点遍历过</span></span><br><span class="line">                    <span class="built_in">glBegin</span>(GL_LINES);</span><br><span class="line">                    <span class="built_in">glColor3f</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; now.<span class="built_in">size</span>(); j++) &#123;<span class="comment">//绘制交多边形</span></span><br><span class="line">                        <span class="built_in">glVertex2f</span>(now[j].x, now[j].y);</span><br><span class="line">                        <span class="built_in">glVertex2f</span>(now[(j+<span class="number">1</span>)%now.<span class="built_in">size</span>()].x, now[(j+<span class="number">1</span>)%now.<span class="built_in">size</span>()].y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    now.<span class="built_in">clear</span>();</span><br><span class="line">                    <span class="built_in">glEnd</span>();</span><br><span class="line">                    <span class="built_in">glFlush</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                vis1[nowpos] = <span class="literal">true</span>;<span class="comment">//给当前经历点打上标记</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isPointInsidePoly</span>(new1[nowpos], poly2) &amp;&amp; !<span class="built_in">isPointInsidePoly</span>(new1[(nowpos+<span class="number">1</span>)%len1], poly2)) &#123;<span class="comment">//判断是否为出点</span></span><br><span class="line">                    ch = <span class="number">2</span>;</span><br><span class="line">                    nowpos = pos1[nowpos];</span><br><span class="line">                    nowpos = (nowpos + <span class="number">1</span>) % len2;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nowpos = (nowpos + <span class="number">1</span>) % len1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//遍历第二个多边形</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isPointInsidePoly</span>(new2[nowpos], poly1)) now.<span class="built_in">push_back</span>(new2[nowpos]);</span><br><span class="line">                <span class="keyword">if</span> (vis2[nowpos]) &#123;<span class="comment">//如果该点遍历过</span></span><br><span class="line">                    <span class="built_in">glBegin</span>(GL_LINES);</span><br><span class="line">                    <span class="built_in">glColor3f</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; now.<span class="built_in">size</span>(); j++) &#123;<span class="comment">//绘制交多边形</span></span><br><span class="line">                        <span class="built_in">glVertex2f</span>(now[j].x, now[j].y);</span><br><span class="line">                        <span class="built_in">glVertex2f</span>(now[(j+<span class="number">1</span>)%now.<span class="built_in">size</span>()].x, now[(j+<span class="number">1</span>)%now.<span class="built_in">size</span>()].y);</span><br><span class="line">                    &#125;</span><br><span class="line">                    now.<span class="built_in">clear</span>();</span><br><span class="line">                    <span class="built_in">glEnd</span>();</span><br><span class="line">                    <span class="built_in">glFlush</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                vis2[nowpos] = <span class="literal">true</span>;<span class="comment">//给当前点打上标记</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isPointInsidePoly</span>(new2[nowpos], poly1) &amp;&amp; !<span class="built_in">isPointInsidePoly</span>(new2[(nowpos+<span class="number">1</span>)%len2], poly1)) &#123;<span class="comment">//判断是否为出点</span></span><br><span class="line">                    ch = <span class="number">1</span>;</span><br><span class="line">                    nowpos = pos2[nowpos];</span><br><span class="line">                    nowpos = (nowpos + <span class="number">1</span>) % len1;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    nowpos = (nowpos + <span class="number">1</span>) % len2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存入需要绘制的两个多边形，按顺序存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    poly1.<span class="built_in">clear</span>();</span><br><span class="line">    poly2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;-5, -5&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;-5, 5&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;5, 5&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;5, -5&#125;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;-7, 0&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;0, 7&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;7, 0&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;0, -7&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;0, -6&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;-3, -3&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;0, 3&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;3, 0&#125;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;0, -3&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;-3, 3&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;0, 6&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;3, 3&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;-8, -6&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;-8,  6&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;8, 6&#125;);</span></span><br><span class="line"><span class="comment">//    poly1.push_back(&#123;8, -6&#125;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;-2, 10&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;12, -6&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;-2, 2&#125;);</span></span><br><span class="line"><span class="comment">//    poly2.push_back(&#123;-12, -6&#125;);</span></span><br><span class="line"></span><br><span class="line">    poly2.<span class="built_in">push_back</span>(&#123;<span class="number">-6</span>, <span class="number">-3</span>&#125;);</span><br><span class="line">    poly2.<span class="built_in">push_back</span>(&#123;<span class="number">-6</span>,  <span class="number">3</span>&#125;);</span><br><span class="line">    poly2.<span class="built_in">push_back</span>(&#123;<span class="number">6</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    poly2.<span class="built_in">push_back</span>(&#123;<span class="number">6</span>, <span class="number">-3</span>&#125;);</span><br><span class="line"></span><br><span class="line">    poly1.<span class="built_in">push_back</span>(&#123;<span class="number">-1.98</span>, <span class="number">0.91</span>&#125;);</span><br><span class="line">    poly1.<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">6</span>&#125;);</span><br><span class="line">    poly1.<span class="built_in">push_back</span>(&#123;<span class="number">12</span>, <span class="number">6</span>&#125;);</span><br><span class="line">    poly1.<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">-2</span>&#125;);</span><br><span class="line">    poly1.<span class="built_in">push_back</span>(&#123;<span class="number">8</span>, <span class="number">4.7</span>&#125;);</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.0</span>, <span class="number">0.3</span>, <span class="number">0.7</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="built_in">glShadeModel</span>(GL_SMOOTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形学 </category>
          
          <category> Weiler-Atherton多边形裁剪算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 755 (Div. 2)</title>
      <link href="/2021/11/15/Codeforces-Round-755-Div-2/"/>
      <url>/2021/11/15/Codeforces-Round-755-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接:<a href="https://codeforces.ml/contest/1589">https://codeforces.ml/contest/1589</a></p><h1 id="A-Mathematical-Addition"><a href="#A-Mathematical-Addition" class="headerlink" title="A. Mathematical Addition"></a>A. Mathematical Addition</h1><p>$$\frac{x}{u}+\frac{y}{v}=\frac{x+y}{u+v}$$</p><p>化简得:</p><p>$$\frac{x}{y}=-\frac{u^2}{v^2}$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ll u, v; cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        cout &lt;&lt; u * u &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; - v * v &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Coloring-Rectangles"><a href="#B-Coloring-Rectangles" class="headerlink" title="B. Coloring Rectangles"></a>B. Coloring Rectangles</h1><p>考虑构造尽量多的1*3的块，剩下1或2行再累计上去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) cout &lt;&lt; <span class="built_in">get</span>(m) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span>) cout &lt;&lt; <span class="built_in">get</span>(n) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span> || m % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; n * m / <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, n/<span class="number">3</span>*m+n%<span class="number">3</span>*<span class="built_in">get</span>(m));</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, m/<span class="number">3</span>*n+m%<span class="number">3</span>*<span class="built_in">get</span>(n));</span><br><span class="line">                cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Two-Arrays"><a href="#C-Two-Arrays" class="headerlink" title="C. Two Arrays"></a>C. Two Arrays</h1><p>每个a中的值都可与b中的一些值匹配，跑一遍最大匹配即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N], b[N], match[N], vis[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            vis[v] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!match[v] || <span class="built_in">dfs</span>(match[v])) &#123;</span><br><span class="line">                match[v] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; b[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) g[i].<span class="built_in">clear</span>(), match[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i]==b[j] || a[i]+<span class="number">1</span>==b[j]) g[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == n) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Guess-the-Permutation"><a href="#D-Guess-the-Permutation" class="headerlink" title="D. Guess the Permutation"></a>D. Guess the Permutation</h1><p>首先要找到开始的i点，这里可以直接二分，当逆序数为0说明前mid个数是ordered。</p><p>然后得到i点后，设f(l,r)为$[l,r]$中逆序数的个数，那么f(l,n)-f(l+1,n)为$[l+1,n]$中小于a[l]的个数，因此$j=a[l]=f(i,n)-f(i+1,n)+i+1$</p><p>那么因此类推，$k=f(j,n)-f(j+1,n)+j$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">print</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %d %d\n&quot;</span>,l, r);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    ll x; cin &gt;&gt; x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        ll x;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            x = <span class="built_in">print</span>(<span class="number">1</span>, mid);</span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">0</span>) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = l - <span class="number">1</span>;</span><br><span class="line">        b = <span class="built_in">print</span>(a, n)-<span class="built_in">print</span>(a+<span class="number">1</span>,n)+a+<span class="number">1</span>;</span><br><span class="line">        c = b + <span class="built_in">print</span>(b, n)-<span class="built_in">print</span>(b+<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;! %d %d %d\n&quot;</span>, a, b, c);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 467 (Div. 2)</title>
      <link href="/2021/11/11/Codeforces-Round-467-Div-2/"/>
      <url>/2021/11/11/Codeforces-Round-467-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/937">https://codeforces.com/contest/937</a></p><h1 id="A-Olympiad"><a href="#A-Olympiad" class="headerlink" title="A. Olympiad"></a>A. Olympiad</h1><p>找有多少个不同的数，0不算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">0</span>) f = <span class="number">1</span>;</span><br><span class="line">        st.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f) cout &lt;&lt; st.<span class="built_in">size</span>() - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; st.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Vile-Grasshoppers"><a href="#B-Vile-Grasshoppers" class="headerlink" title="B. Vile Grasshoppers"></a>B. Vile Grasshoppers</h1><p>在2<del>y上找一个最大的数不能被2</del>p上的数整除</p><p>只要从后往前暴力找就可以了，质数距离越到后面越小</p><p>假设当前数不是质数且不被2~p上的数整除，那么这个数最小为(p+1)*(p+2)</p><p>因此</p><ol><li><p>当$(p+1)*(p+2)&gt;y$时，就是找小于等于y的第一个质数，由于质数距离很小，因此复杂度没问题</p></li><li><p>当$(p+1)*(p+2)&lt;=y$时，p最多为$\sqrt{y}$ ，因此时间复杂度是$O(\sqrt{y}*w)$，w为最大质数距离</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, p;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= p &amp;&amp; <span class="number">1ll</span>*i * i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n == p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="built_in">max</span>(p+<span class="number">1</span>,n<span class="number">-2000</span>); i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(i)) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Save-Energy"><a href="#C-Save-Energy" class="headerlink" title="C. Save Energy!"></a>C. Save Energy!</h1><p>每k分钟自动点火，每d分钟手动点火</p><p>首先如果d整除k，那么直接输出t</p><p>否则二分答案计算当前时间为mid时，实际加热度为多少</p><p>我们发现其实是个循环，每个k到后面那个d的时间是m=d- k%d，那么一个周期就是k+m  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ll k, d, t;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    ll m = d - k % d;</span><br><span class="line">    ll mm = k + m;</span><br><span class="line">    ll cnt = x / mm;</span><br><span class="line">    <span class="keyword">double</span> left = x - cnt*mm;</span><br><span class="line">    <span class="keyword">double</span> ans = cnt * m * <span class="number">0.5</span> + cnt * k;</span><br><span class="line">    <span class="keyword">if</span> (left - k &gt;= eps) ans += k + (left-k)*<span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">else</span> ans += left;</span><br><span class="line">    <span class="keyword">return</span> ans &gt;= t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; d &gt;&gt; t;</span><br><span class="line">    <span class="keyword">if</span> (k % d == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> l = t, r = <span class="number">2</span>*t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) * <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%0.9lf\n&quot;</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Sleepy-Game"><a href="#D-Sleepy-Game" class="headerlink" title="D. Sleepy Game"></a>D. Sleepy Game</h1><p>目的：找环和奇数路径</p><p>找环可以直接用tarjan算法，然后把环标记上记号</p><p>找奇数路径可以存一个$vis[x][2]$ 代表走到x这个节点经过了偶数/奇数步，这样每个点最多被访问两次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[N][<span class="number">2</span>], flag, ff;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line"><span class="keyword">int</span> dfn[N], low[N], idx, tp, in_stk[N], Vis[N], sd[N], scc;</span><br><span class="line"><span class="keyword">int</span> vvis[N];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; st[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> st)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x][st]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (vvis[x]) ff = <span class="number">1</span>;</span><br><span class="line">    vis[x][st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(v, st^<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            ve.<span class="built_in">push_back</span>(x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!G[x].<span class="built_in">size</span>() &amp;&amp; st == <span class="number">1</span>) &#123;</span><br><span class="line">        ve.<span class="built_in">push_back</span>(x);</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    low[x] = dfn[x] = ++idx;</span><br><span class="line">    Vis[x] = <span class="number">1</span>;</span><br><span class="line">    in_stk[++tp] = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : G[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Vis[v]) &#123;</span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[x] == dfn[x]) &#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        ++scc;</span><br><span class="line">        <span class="keyword">while</span>(y = in_stk[tp--]) &#123;</span><br><span class="line">            sd[y] = scc;</span><br><span class="line">            Vis[y] = <span class="number">0</span>;</span><br><span class="line">            st[scc].<span class="built_in">insert</span>(y);</span><br><span class="line">            <span class="keyword">if</span> (x == y) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num; cin &gt;&gt; num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x; cin &gt;&gt; x;</span><br><span class="line">            G[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= scc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i].<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : st[i]) vvis[it] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s; cin &gt;&gt; s;</span><br><span class="line">    <span class="built_in">dfs</span>(s, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Win&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">reverse</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : ve) cout &lt;&lt; it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scc != n &amp;&amp; ff) cout &lt;&lt; <span class="string">&quot;Draw&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Lose&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021CCPC桂林游记</title>
      <link href="/2021/11/08/2021CCPC%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/"/>
      <url>/2021/11/08/2021CCPC%E6%A1%82%E6%9E%97%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>关于我大学两年打了7场正式赛其中6场是线上的事</p><h1 id="2-Week"><a href="#2-Week" class="headerlink" title="-2 Week"></a>-2 Week</h1><p>10月份最早得知ccpc桂林要办线下，估摸着就剩桂林可能是线下了，就算顶着一众强队报名也冲了，不去博弈什么了。</p><p>10月22日晚在我们死缠烂打下学校同意坐飞机去桂林(好耶)，当晚直接订机票，真的兴奋了好久(<del>小丑竟是我自己</del> )。离比赛还有2周左右的时间，虽然各地疫情开始爆发，广州也转线上了，但桂林还开始订酒店了?心想应该稳了吧。</p><p>好家伙，10月22日晚群里突然开始不对劲。怎么全是rnm，退钱?是我错过了什么？一直往上翻也没看到什么官方的通知，全是民间消息，然后看到主办方学生发了一个”不信谣，不传谣”，心想，怎么有人这也会信。没过多久群主直接@全体成员，啪，改线上了！这几分钟我直接经历人生大起大落，还没缓过来突然想起机票钱木了。</p><h1 id="1-Week"><a href="#1-Week" class="headerlink" title="-1 Week"></a>-1 Week</h1><p>这一整周基本上都在低沉的情绪里度过，作孽选择卷王桂林真是绝了。</p><h1 id="3-Day"><a href="#3-Day" class="headerlink" title="-3 Day"></a>-3 Day</h1><p>物资到了，米粉味道还行，正如主办说的，<del>确实是桂林米粉的味道</del> 。</p><p>但衣服看上去是不错的，配色相当喜欢，但是真的大，平时穿的XL现在可以当裙子?</p><h1 id="1-Day"><a href="#1-Day" class="headerlink" title="-1 Day"></a>-1 Day</h1><p>下午3点热身赛，但现场还是一片狼藉，横幅也没挂好、打印系统还不熟练…</p><p>根据以往热身赛战神的经验，<del>这场绝对不能打的太好</del> ，A题典中典的期望题全队宕机，1h左右才A出来，然后B、C看完开始坐牢。当时对自己的状态还是不太满意的，毕竟榜上队伍过题速度超级快，而且很多强队基本上没打…</p><h1 id="0-Day"><a href="#0-Day" class="headerlink" title="0 Day"></a>0 Day</h1><p>ccpc整个赛季的霉运都撞上了，前一天晚上隔壁总决赛，12点开始直接进入返祖状态，整幢楼开始狂叫?(刀斯林泪目)。早上七点半勉强起床，急忙买了一些早餐和魔爪提神。赛前还是挺紧张的，毕竟是生涯最后一场ccpc了(应该)，不想留什么遗憾了。</p><p>开赛前5分钟收到题目，看到A题名字，好家伙我直接PTSD，《一个叫马格纳斯的英雄》，<del>原来是浙大出题，那就说得通了</del> 。</p><p>比赛开始，我直接开A题，题面超级长，一眼望去却无比熟悉，<del>好像自己出的题一样</del>。一分钟理解透意思，直接叫队友交，1WA，我直接满头问号??? 再仔细检查了一下题面，n是奇数，赶紧叫队友把特判去掉，2A。这时队友I题已经读好了，和我讨论了一下之后就开始码了，但这场确实有点毒，队友J连wa两发之后被我赶下机位，几分钟重构后3A。然后队友X和我们讲他的G题贪心想法，我一向是不太倾向于贪心的，而且觉得1e6的复杂度带个log的二分似乎更合理一些，然后就开始二分答案去搞(赛后听说贪心确实能过？)，然后就陷入debug的无尽循环，最终124min2A，这时队友已经开完DEK了，我选择了比较擅长的E，队友开始讨论D。E题意看的挺自闭的，我反复读了快10分钟+查阅字典才勉强读透，毕竟之前省赛读假题的经历还历历在目。简化一下题意就是求最小环，看到2000的数据，直接在每个点跑一遍dij，然后暴力枚举判环就好了。10分钟左右码完，测完样例直接莽了一波1WA，开始陷入自我怀疑，后来冷静分析一下，好像答案只有0,1,2?改完之后交完评测机直接不动了，一直pending了快3分钟，终于跳出红色的答案正确，213min2A。这时已经4题了，但还是不敢看榜。最后就是死攻D题，队友X写了个随机数据+半对拍，队友J大胆猜测完直接上机，码完后测了几十组样例都没问题，直接开莽，评测机又不动了…，不过这时基本上是确定过了，因为好多队伍都是这样然后过的。直到红色的答案正确再次出现，265min1A，这也是这场第一次1A的题，5题在手总算敢打开榜单看一下，发现自己在封榜前已经是铜牌区了，长舒一口气。最后半小时基本上也没做什么，讨论了一下B题和K题，觉得是线段树和状压DP(事实证明K的暴力剪枝)。</p><p>赛后3点看了闭幕式和颁奖，恭喜三个顶俩，在铜奖看到自己队名还是挺激动的，毕竟ccpc的含金量还是不错的，算是给自己这几个月来拼命训练的奖励吧。</p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>不以物喜，不以己悲，心存高远，脚踏实地。<del>天道酬勤永远不是贬义词</del> 。</p><p>by <strong>一个普通的ACMer</strong>                                    </p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 赛后记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛后记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 753 (Div. 3)</title>
      <link href="/2021/11/04/Codeforces-Round-753-Div-3/"/>
      <url>/2021/11/04/Codeforces-Round-753-Div-3/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/1607">https://codeforces.com/contest/1607</a></p><h1 id="A-Linear-Keyboard"><a href="#A-Linear-Keyboard" class="headerlink" title="A. Linear Keyboard"></a>A. Linear Keyboard</h1><p>暴力模拟题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        string t; cin &gt;&gt; t;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">pos</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            pos[t[i]-<span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, now = pos[s[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            ans += <span class="built_in">abs</span>(pos[s[i]-<span class="string">&#x27;a&#x27;</span>] - now);</span><br><span class="line">            now = pos[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Odd-Grasshopper"><a href="#B-Odd-Grasshopper" class="headerlink" title="B. Odd Grasshopper"></a>B. Odd Grasshopper</h1><p>打表找一下规律，发现每4次操作会回到原地</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ll x, n; cin &gt;&gt; x &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            ll tmp = n / <span class="number">4</span> * <span class="number">4</span>;</span><br><span class="line">            ll now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (ll i = tmp+<span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now % <span class="number">2</span> == <span class="number">0</span>) now -= i;</span><br><span class="line">                <span class="keyword">else</span> now += i;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; now + x &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) x -= i;</span><br><span class="line">                    <span class="keyword">else</span> x += i;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) x -= i;</span><br><span class="line">                    <span class="keyword">else</span> x += i;</span><br><span class="line">                &#125;</span><br><span class="line">                ll tmp = (n<span class="number">-2</span>)/<span class="number">4</span>*<span class="number">4</span>+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">for</span> (ll i = tmp+<span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) x -= i;</span><br><span class="line">                    <span class="keyword">else</span> x += i;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Minimum-Extraction"><a href="#C-Minimum-Extraction" class="headerlink" title="C. Minimum Extraction"></a>C. Minimum Extraction</h1><p>从小到大枚举当前数作为最小值，最后取max</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; a[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">sort</span>(a+<span class="number">1</span>, a+n+<span class="number">1</span>);</span><br><span class="line">            ll sum = <span class="number">0</span>, ma = <span class="number">-1e9</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                ma = <span class="built_in">max</span>(ma, a[i] + sum);</span><br><span class="line">                sum -= (a[i] + sum);</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; ma &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Blue-Red-Permutation"><a href="#D-Blue-Red-Permutation" class="headerlink" title="D. Blue-Red Permutation"></a>D. Blue-Red Permutation</h1><p>我们将题目转化一下，变成每个数都有一个范围的取值，问是否存在取值满足$[1,n]$都存在。</p><p>直接将区间排序，然后贪心从前往后扫一遍就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rhs.l == l) <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">        <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">        cin &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt; <span class="number">1</span>) f = <span class="number">1</span>;</span><br><span class="line">                p[i] = &#123;<span class="number">1</span>, <span class="built_in">min</span>(n, a[i])&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; n) f = <span class="number">1</span>;</span><br><span class="line">                p[i] = &#123;<span class="built_in">max</span>(<span class="number">1</span>, a[i]), n&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (f) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">sort</span>(p+<span class="number">1</span>, p+n+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &gt;= p[i].l &amp;&amp; now &lt;= p[i].r) now++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    f = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (f) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Robot-on-the-Board-1"><a href="#E-Robot-on-the-Board-1" class="headerlink" title="E. Robot on the Board 1"></a>E. Robot on the Board 1</h1><p>首先考虑什么时候必定无法满足，也就是当前最大最小的坐标差大于地图时。</p><p>然后我假设起点位于$(1, 1)$的位置，如果当前位置位于地图外，我们调整起始位置将当前位置扭回来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> nowx = <span class="number">1</span>, nowy = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ansx = <span class="number">1</span>, ansy = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> Mix = <span class="number">1</span>, Miy = <span class="number">1</span>, Max = <span class="number">1</span>, May = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;L&#x27;</span>) y--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;R&#x27;</span>) y++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;D&#x27;</span>) x++;</span><br><span class="line">            <span class="keyword">else</span> x--;</span><br><span class="line">            Mix = <span class="built_in">min</span>(Mix, x);</span><br><span class="line">            Max = <span class="built_in">max</span>(Max, x);</span><br><span class="line">            May = <span class="built_in">max</span>(May, y);</span><br><span class="line">            Miy = <span class="built_in">min</span>(Miy, y);</span><br><span class="line">            <span class="keyword">if</span> (Max - Mix &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (May - Miy &gt;= m) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;L&#x27;</span>) nowy--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;R&#x27;</span>) nowy++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;D&#x27;</span>) nowx++;</span><br><span class="line">            <span class="keyword">else</span> nowx--;</span><br><span class="line">            <span class="keyword">if</span> (nowx == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ansx + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">                    ansx++;</span><br><span class="line">                    nowx = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nowx == n+<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ansx - <span class="number">1</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    ansx--;</span><br><span class="line">                    nowx = n;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nowy == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ansy + <span class="number">1</span> &lt;= m) &#123;</span><br><span class="line">                    ansy++;</span><br><span class="line">                    nowy = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nowy == m + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ansy - <span class="number">1</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    ansy--;</span><br><span class="line">                    nowy = m;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ansx &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ansy &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 615 (Div. 3)</title>
      <link href="/2021/11/03/Codeforces-Round-615-Div-3/"/>
      <url>/2021/11/03/Codeforces-Round-615-Div-3/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/1294">https://codeforces.com/contest/1294</a></p><h1 id="A-Collecting-Coins"><a href="#A-Collecting-Coins" class="headerlink" title="A. Collecting Coins"></a>A. Collecting Coins</h1><p>先将所有数补成相等，然后看剩下的是否是3的倍数即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, n; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) <span class="built_in">swap</span>(a, b);</span><br><span class="line">    <span class="keyword">if</span> (a &lt; c) <span class="built_in">swap</span>(a, c);</span><br><span class="line">    <span class="keyword">int</span> ans = a - b + a - c;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; n) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((ans-n)%<span class="number">3</span>==<span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Collecting-Packages"><a href="#B-Collecting-Packages" class="headerlink" title="B. Collecting Packages"></a>B. Collecting Packages</h1><p>简单的模拟题，按x轴排序，再按y排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == rhs.x) <span class="keyword">return</span> y &lt; rhs.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p+<span class="number">1</span>, p+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].y &lt; p[i<span class="number">-1</span>].y) f = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = p[i].x - p[i<span class="number">-1</span>].x;</span><br><span class="line">            <span class="keyword">int</span> y = p[i].y - p[i<span class="number">-1</span>].y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= x; j++) cout &lt;&lt; <span class="string">&quot;R&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++) cout &lt;&lt; <span class="string">&quot;U&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Product-of-Three-Numbers"><a href="#C-Product-of-Three-Numbers" class="headerlink" title="C. Product of Three Numbers"></a>C. Product of Three Numbers</h1><p>我的想法是先质因数分解，然后讨论质因子的个数，如果质因子的种类&gt;=3，那么一定是可以的，如果是2，那么先各取一个，然后判断剩下的是否和其中两个相等，如果只有一个质因子，那么数量至少为6。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> tmp = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= tmp; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (tmp % i == <span class="number">0</span>) tmp /= i, mp[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="number">1</span>) mp[tmp]++;</span><br><span class="line">    <span class="keyword">if</span> (mp.<span class="built_in">size</span>() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">int</span> a = (*it).first;</span><br><span class="line">        <span class="keyword">int</span> b = (*++it).first;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n / a / b &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mp.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">int</span> a = (*it).first;</span><br><span class="line">        <span class="keyword">int</span> b = (*++it).first;</span><br><span class="line">        <span class="keyword">if</span> (a != n / a / b &amp;&amp; n / a / b != b &amp;&amp; n / a / b &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n / a / b &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; (*it).second &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> ((*it).second &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; (*it).first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; (*it).first*(*it).first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n/(*it).first/(*it).first/(*it).first &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-MEX-maximizing"><a href="#D-MEX-maximizing" class="headerlink" title="D. MEX maximizing"></a>D. MEX maximizing</h1><p>因为一个数可以+或-任意个x，因此这些数如果%x同余，那么他们可以互相转化，这样的话只需要讨论同余的个数就可以了，我用线段树维护最小值以及最小值的下标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> mi, pos;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u&lt;&lt;<span class="number">1</span>].mi &lt;= t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi) &#123;</span><br><span class="line">        t[u].mi = t[u&lt;&lt;<span class="number">1</span>].mi;</span><br><span class="line">        t[u].pos = t[u&lt;&lt;<span class="number">1</span>].pos;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t[u].mi = t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi;</span><br><span class="line">        t[u].pos = t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[u].l = l, t[u].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[u].pos = l;</span><br><span class="line">        t[u].mi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u].l == t[u].r) &#123;</span><br><span class="line">        t[u].mi++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[u].l + t[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, pos);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pii <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; qr &gt;= t[u].r) <span class="keyword">return</span> &#123;t[u].mi, t[u].pos&#125;;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[u].l + t[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    pii ans = &#123;inf, inf&#125;;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>, ql, qr));</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, ql, qr));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q, x; cin &gt;&gt; q &gt;&gt; x;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val; cin &gt;&gt; val;</span><br><span class="line">        val %= x;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, val);</span><br><span class="line">        pii ans = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, x<span class="number">-1</span>);</span><br><span class="line">        cout &lt;&lt; ans.first * x + ans.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Obtain-a-Permutation"><a href="#E-Obtain-a-Permutation" class="headerlink" title="E. Obtain a Permutation"></a>E. Obtain a Permutation</h1><p>很明显如果是变换，那么一定是同一列的在变，因此对于每一列来说都是独立考虑的，我们需要计算每一列重新排列的最小花费，其实就是计算在当前有多少个数不在顺序上再加上偏移量就是花费，最后对花费和n取一个min。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x; cin &gt;&gt; x;</span><br><span class="line">            a[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ve;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) ve.<span class="built_in">push_back</span>(a[j][i]);</span><br><span class="line">        map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp, cnt;</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) mp[i+(j<span class="number">-1</span>)*m] = j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[ve[j]]) &#123;</span><br><span class="line">                cnt[(j+<span class="number">1</span>-mp[ve[j]]+n)%n]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mi = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : cnt) &#123;</span><br><span class="line"><span class="comment">//            cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; it.first &lt;&lt; &#x27; &#x27; &lt;&lt; it.second &lt;&lt; endl;</span></span><br><span class="line">            mi = <span class="built_in">min</span>(mi, n - it.second + it.first);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += mi;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; mi &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Three-Paths-on-a-Tree"><a href="#F-Three-Paths-on-a-Tree" class="headerlink" title="F. Three Paths on a Tree"></a>F. Three Paths on a Tree</h1><p>首选从贪心的角度想，肯定有两个点是直径的两端，然后再选择一个点到直径上最长的距离，这里用多源的bfs就可以，记住三个点不可以相同，特判一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> dis1[N], p, pre[N], vis[N], dis3[N], pp, q, dis2[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis1[v] = dis1[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dis1[v] &gt; dis1[p]) p = v;</span><br><span class="line">        pre[v] = x;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dis2[v] = dis2[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dis2[v] &gt; dis2[pp]) pp = v;</span><br><span class="line">        pre[v] = x;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(p, <span class="number">0</span>);</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">int</span> now = pp;</span><br><span class="line">    vis[now] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (now != p) &#123;</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(now);</span><br><span class="line">        now = pre[now];</span><br><span class="line">        vis[now] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.<span class="built_in">push_back</span>(now);</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : tmp) que.<span class="built_in">push</span>(it);</span><br><span class="line">    <span class="keyword">while</span> (que.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (dis3[x] &gt; dis3[q]) q = x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dis3[x] == dis3[q] &amp;&amp; x != pp &amp;&amp; x != p) q = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                dis3[v] = dis3[x] + <span class="number">1</span>;</span><br><span class="line">                que.<span class="built_in">push</span>(v);</span><br><span class="line">                vis[v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dis2[pp] + dis3[q] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; pp &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; q &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 59 (Rated for Div. 2)</title>
      <link href="/2021/11/03/Educational-Codeforces-Round-59-Rated-for-Div-2/"/>
      <url>/2021/11/03/Educational-Codeforces-Round-59-Rated-for-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/1107">https://codeforces.com/contest/1107</a></p><h1 id="A-Digits-Sequence-Dividing"><a href="#A-Digits-Sequence-Dividing" class="headerlink" title="A. Digits Sequence Dividing"></a>A. Digits Sequence Dividing</h1><p>考虑拆分成两个数，第一个数取一位，后面全部取为第二个数保证最优，当只有两个数且第一个小于等于第二个时输出NO</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] &gt;= s[<span class="number">1</span>]) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; s[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; s[<span class="number">0</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) cout &lt;&lt; s[i];</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Digital-root"><a href="#B-Digital-root" class="headerlink" title="B - Digital root"></a>B - Digital root</h1><p>打表发现所有数字都有一个规律，就是从1~9</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        ll k, x; cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; x + (k - <span class="number">1</span>) * <span class="number">9</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Brutality"><a href="#C-Brutality" class="headerlink" title="C - Brutality"></a>C - Brutality</h1><p>思路还是比较简单的，直接取每段的最大k个数就可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ve[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k; cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    cin &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[i<span class="number">-1</span>]) ve[cnt].<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            ve[cnt].<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) <span class="built_in">sort</span>(ve[i].<span class="built_in">begin</span>(), ve[i].<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">min</span>(k, (<span class="keyword">int</span>)ve[i].<span class="built_in">size</span>()); j++) ans += ve[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Compression"><a href="#D-Compression" class="headerlink" title="D - Compression"></a>D - Compression</h1><p>如果可以压缩，那么必须满足当前$x*x$方格内的数全部相同，因此记录二维前缀和就可以，然后x必须是n的因子，直接暴力枚举，复杂度就是$O(N^2\sqrt{N})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[<span class="number">5250</span>][<span class="number">5250</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[x2][y2]+sum[x1<span class="number">-1</span>][y1<span class="number">-1</span>]-sum[x1<span class="number">-1</span>][y2]-sum[x2][y1<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/x; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n/x; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = x*(i<span class="number">-1</span>)+<span class="number">1</span>, y1 = x*(j<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> x2 = i*x, y2 = j*x;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="built_in">get</span>(x1, y1, x2, y2);</span><br><span class="line">            <span class="keyword">if</span> (ans != <span class="number">0</span> &amp;&amp; ans != x*x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n/<span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c; cin &gt;&gt; c;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span>) now = <span class="number">10</span> + c - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> now = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                sum[i][<span class="number">4</span>*(j<span class="number">-1</span>)+k+<span class="number">1</span>] = now &gt;&gt; (<span class="number">4</span>-k<span class="number">-1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            sum[i][j] += sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(i)) ans = <span class="built_in">max</span>(ans, i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(n/i)) ans = <span class="built_in">max</span>(ans, n/i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 451 (Div.2)</title>
      <link href="/2021/10/28/Codeforces-Round-451-Div-2/"/>
      <url>/2021/10/28/Codeforces-Round-451-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/1586">https://codeforces.ml/contest/898</a></p><h1 id="A-Rounding"><a href="#A-Rounding" class="headerlink" title="A. Rounding"></a>A. Rounding</h1><p>简单的四舍五入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">10</span> &lt;= <span class="number">5</span>) cout &lt;&lt; n / <span class="number">10</span> * <span class="number">10</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; (n / <span class="number">10</span> + <span class="number">1</span>) * <span class="number">10</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Proper-Nutrition"><a href="#B-Proper-Nutrition" class="headerlink" title="B. Proper Nutrition"></a>B. Proper Nutrition</h1><p>$ax+by=n$ 直接枚举a的个数就可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b; cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1e7</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i * a &gt; n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ((n-i*a)%b==<span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; (n-i*a)/b &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Phone-Numbers"><a href="#C-Phone-Numbers" class="headerlink" title="C. Phone Numbers"></a>C. Phone Numbers</h1><p>暴力去除后缀</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string, set&lt;string&gt;&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(string s, string ss)</span> </span>&#123;</span><br><span class="line">    set&lt;string&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp[s]) &#123;</span><br><span class="line">        <span class="keyword">int</span> ff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (it.<span class="built_in">size</span>() &gt;= ss.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = ss.<span class="built_in">size</span>() - <span class="number">1</span>, r = it.<span class="built_in">size</span>() - <span class="number">1</span>; l &gt;= <span class="number">0</span> &amp;&amp; r &gt;= <span class="number">0</span>; l--, r--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ss[l] != it[r]) &#123;</span><br><span class="line">                    ff = <span class="number">1</span>;</span><br><span class="line">                    tmp.<span class="built_in">insert</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ff) <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = ss.<span class="built_in">size</span>() - <span class="number">1</span>, r = it.<span class="built_in">size</span>() - <span class="number">1</span>; l &gt;= <span class="number">0</span> &amp;&amp; r &gt;= <span class="number">0</span>; l--, r--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ss[l] != it[r]) &#123;</span><br><span class="line">                    tmp.<span class="built_in">insert</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mp[s] = tmp;</span><br><span class="line">    mp[s].<span class="built_in">insert</span>(ss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> m; cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            string ss; cin &gt;&gt; ss;</span><br><span class="line">            <span class="built_in">check</span>(s, ss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; mp.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp) &#123;</span><br><span class="line">        cout &lt;&lt; it.fi &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; it.se.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : it.se) cout &lt;&lt; item &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Alarm-Clock"><a href="#D-Alarm-Clock" class="headerlink" title="D. Alarm Clock"></a>D. Alarm Clock</h1><p>考虑贪心，每次都保留最前面k-1个数</p><p>我利用单调队列模拟了一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k; cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>, a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hh = <span class="number">1</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[i] - a[q[hh]] &gt;= m) ++hh;</span><br><span class="line">        q[++tt] = i;</span><br><span class="line">        <span class="keyword">if</span> (tt - hh + <span class="number">1</span> &gt;= k) --tt, ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Squares-and-not-squares"><a href="#E-Squares-and-not-squares" class="headerlink" title="E. Squares and not squares"></a>E. Squares and not squares</h1><p>先预处理出每个数</p><p>如果是平方数，处理出到达非平方数的最小步数</p><p>如果不是平方数，处理出到达平方数的最小步数</p><p>然后分开讨论一下就可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (s * s == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ve, ve2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(a[i])) &#123;</span><br><span class="line">            b[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="number">0</span>) c[i] = <span class="number">2</span>, ve.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> c[i] = <span class="number">1</span>, ve.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> s = <span class="built_in">sqrt</span>(a[i]);</span><br><span class="line">            b[i] = <span class="built_in">min</span>(a[i] - s * s, (s+<span class="number">1</span>)*(s+<span class="number">1</span>) - a[i]);</span><br><span class="line">            ve2.<span class="built_in">push_back</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ve.<span class="built_in">size</span>() &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ve.<span class="built_in">size</span>() - i &gt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            ans += ve[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">sort</span>(ve2.<span class="built_in">begin</span>(), ve2.<span class="built_in">end</span>());</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ve.<span class="built_in">size</span>() + i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        ans += ve2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 751 (Div. 2)</title>
      <link href="/2021/10/25/Codeforces-Round-751-Div-2/"/>
      <url>/2021/10/25/Codeforces-Round-751-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.ml/contest/1602">https://codeforces.ml/contest/1602</a></p><h1 id="A-Two-Subsequences"><a href="#A-Two-Subsequences" class="headerlink" title="A. Two Subsequences"></a>A. Two Subsequences</h1><p>直接找到最小的字符输出，然后把剩下的也输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">100</span>+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i]&lt; s[idx]) &#123;</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[idx] = <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; s[idx] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) cout &lt;&lt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Divine-Array"><a href="#B-Divine-Array" class="headerlink" title="B. Divine Array"></a>B. Divine Array</h1><p>可以看出超过n次操作肯定会趋于不变，因此$n^2$暴力一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                b[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i], b[<span class="number">0</span>][i] = a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                cnt[b[i<span class="number">-1</span>][j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                b[i][j] = cnt[b[i<span class="number">-1</span>][j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> q; cin &gt;&gt; q; <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, k; cin &gt;&gt; x &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; n) cout &lt;&lt; b[n][x] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; b[k][x] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Array-Elimination"><a href="#C-Array-Elimination" class="headerlink" title="C. Array Elimination"></a>C. Array Elimination</h1><p>从进制角度考虑，每次取k个&amp;肯定会消除k个1，因此每位上的和都是k的倍数，那么可以实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) sum[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++) &#123;</span><br><span class="line">                sum[j] += (a[i] &gt;&gt; j &amp; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ff = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum[j] % i != <span class="number">0</span>) &#123;</span><br><span class="line">                    ff = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ff) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Frog-Traveler"><a href="#D-Frog-Traveler" class="headerlink" title="D. Frog Traveler"></a>D. Frog Traveler</h1><p>有点毒瘤的题，开始还以为是线段树优化建图，然后跑最短路。赛中忽略了一个重要的条件就是不能往回跳，利用这个条件剪枝就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">int</span> a[N], b[N], dis[N], n, pre[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">print</span>(pre[x]);</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(n);</span><br><span class="line">    <span class="keyword">int</span> dep = n;</span><br><span class="line">    dis[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (now &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; dis[now] &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">print</span>(now);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = now + b[now];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="built_in">min</span>(dep<span class="number">-1</span>, x<span class="number">-1</span>); v &gt;= x-a[x]; v--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[now] + <span class="number">1</span>) &#123;</span><br><span class="line">                dis[v] = dis[now] + <span class="number">1</span>;</span><br><span class="line">                pre[v] = now;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dep = <span class="built_in">min</span>(dep, x - a[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 750 (Div. 2)</title>
      <link href="/2021/10/25/Codeforces-Round-750-Div-2/"/>
      <url>/2021/10/25/Codeforces-Round-750-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.ml/contest/1582">https://codeforces.ml/contest/1582</a></p><h1 id="A-Luntik-and-Concerts"><a href="#A-Luntik-and-Concerts" class="headerlink" title="A. Luntik and Concerts"></a>A. Luntik and Concerts</h1><p>直接找规律，发现答案肯定只有01。</p><ol><li>模上1,2,3的公倍数，然后暴力枚举</li><li>(a+c)%2</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        cout &lt;&lt; (a+c)%<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Luntik-and-Subsequences"><a href="#B-Luntik-and-Subsequences" class="headerlink" title="B. Luntik and Subsequences"></a>B. Luntik and Subsequences</h1><p>记0的个数为num0，1的个数为num1</p><p>$f=num1*2^{num0}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        ll base = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="number">0</span>) base = base * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="number">1</span>) ans += base;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Grandma-Capa-Knits-a-Scarf"><a href="#C-Grandma-Capa-Knits-a-Scarf" class="headerlink" title="C. Grandma Capa Knits a Scarf"></a>C. Grandma Capa Knits a Scarf</h1><p>从两端开始枚举，直到第一个不同位置，那么答案一定就是两者之一了，暴力判断一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        string s; cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">char</span> c1, c2;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[n-i<span class="number">-1</span>]) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                c1 = s[i];</span><br><span class="line">                c2 = s[n-i<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> flag1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[l] == s[r]) &#123;</span><br><span class="line">                    l++, r--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[l] == c1) &#123;</span><br><span class="line">                        l++;</span><br><span class="line">                        num1++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[r] == c1) &#123;</span><br><span class="line">                        r--;</span><br><span class="line">                        num1++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        flag1 = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> flag2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[l] == s[r]) &#123;</span><br><span class="line">                    l++, r--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[l] == c2) &#123;</span><br><span class="line">                        l++;</span><br><span class="line">                        num2++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[r] == c2) &#123;</span><br><span class="line">                        r--;</span><br><span class="line">                        num2++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        flag2 = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag1 &amp;&amp; flag2) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag1 &amp;&amp; !flag2) cout &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!flag1 &amp;&amp; flag2) cout &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">min</span>(num1, num2) &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Vupsen-Pupsen-and-0"><a href="#D-Vupsen-Pupsen-and-0" class="headerlink" title="D. Vupsen, Pupsen and 0"></a>D. Vupsen, Pupsen and 0</h1><p>思路其实很好想，如果是偶数，直接两两配对。如果是奇数，那么我们选择三个数配对，三个数怎么选呢，如果三个数分别为a,b,c，那么我们给a,b一个系数c，c的系数为-(a+b)。这里还有一个坑，即a+b为0。我先是随机找两个数判，然后t了，后来改成两个同符号的就可以了。</p><p>记得两两配对需要除上gcd，不然第二种情况$\sum bi$可能会大于1e9</p><p>以下是证明可行性：<br>奇数时的$\sum bi$最大可构造的数为1e4,1e4-1,1e4,1e4-1…，因此sum&lt;1e9-1e5，那么剩下的a,b,c系数和肯定小于1e5，因此符合要求</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">                cout &lt;&lt; -a[i+<span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; fu, zhen;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) zhen.<span class="built_in">push_back</span>(i);</span><br><span class="line">                <span class="keyword">else</span> fu.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fu.<span class="built_in">size</span>() &gt; <span class="number">1</span>) x = fu[<span class="number">0</span>], y = fu[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> x = zhen[<span class="number">0</span>], y = zhen[<span class="number">1</span>];</span><br><span class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(n+<span class="number">1</span>)</span>, <span class="title">ans</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">            vis[x] = vis[y] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (pre) &#123;</span><br><span class="line">                    <span class="keyword">int</span> gcd = __gcd(<span class="built_in">abs</span>(a[i]), <span class="built_in">abs</span>(a[pre]));</span><br><span class="line">                    ans[i] = -a[pre]/gcd;</span><br><span class="line">                    ans[pre] = a[i]/gcd;</span><br><span class="line">                    vis[pre] = vis[i] = <span class="number">1</span>;</span><br><span class="line">                    pre = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                    ans[x] = ans[y] = a[i];</span><br><span class="line">                    ans[i] = -(a[x]+a[y]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Pchelyonok-and-Segments"><a href="#E-Pchelyonok-and-Segments" class="headerlink" title="E. Pchelyonok and Segments"></a>E. Pchelyonok and Segments</h1><p>考虑dp，因为$\frac{(k+1)*k}{2}&lt;n$，$k&lt;\sqrt{(2n)}$</p><p>因此状态可以表示成$dp[i][j]$代表前i个数当前长度为j的最大值</p><p>$dp[i][j]=max(dp[i][j],sum[i+j-1]-sum[i-1])$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line">ll dp[N][<span class="number">500</span>], sum[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">sqrt</span>(<span class="number">2</span>*n); j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i], sum[i] = sum[i<span class="number">-1</span>] + a[i];</span><br><span class="line">        dp[n+<span class="number">1</span>][<span class="number">0</span>] = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="built_in">sqrt</span>(<span class="number">2</span>*n); j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j &amp;&amp; i + j - <span class="number">1</span> &lt;= n &amp;&amp; sum[i+j<span class="number">-1</span>] - sum[i<span class="number">-1</span>] &lt; dp[i+j][j<span class="number">-1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], sum[i+j<span class="number">-1</span>] - sum[i<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">sqrt</span>(<span class="number">2</span>*n); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[<span class="number">1</span>][j]) ans = j;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F1-Korney-Korneevich-and-XOR-easy-version"><a href="#F1-Korney-Korneevich-and-XOR-easy-version" class="headerlink" title="F1. Korney Korneevich and XOR (easy version)"></a>F1. Korney Korneevich and XOR (easy version)</h1><p>同样考虑dp</p><p>dp的状态还是很巧妙的，设$dp[i]$表示构成i的当前最小值，两层for转移一下就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1024</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; dp[j]) &#123;</span><br><span class="line">                dp[j^a[i]] = <span class="built_in">min</span>(dp[j^a[i]], a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1024</span>; i++) <span class="keyword">if</span> (dp[i] &lt;= <span class="number">500</span>) ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">    cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : ans) cout &lt;&lt; it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赛后想到更直接的转移，利用线段树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    bitset&lt;1024&gt; f;</span><br><span class="line">&#125;t[<span class="number">505</span>&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    t[u].f = t[u&lt;&lt;<span class="number">1</span>].f | t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[u].l = l, t[u].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span>) t[u].f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pos, bitset&lt;<span class="number">1024</span>&gt; val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u].l == t[u].r) &#123;</span><br><span class="line">        t[u].f |= val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[u].l + t[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>, pos, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, pos, val);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bitset&lt;1024&gt; <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; qr &gt;= t[u].r) <span class="keyword">return</span> t[u].f;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[u].l + t[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    bitset&lt;1024&gt; ans;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) ans |= <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) ans |= <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, ql, qr);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i]) <span class="keyword">continue</span>;</span><br><span class="line">        bitset&lt;1024&gt; now = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, a[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++) <span class="keyword">if</span> (now[j]) now[j^a[i]]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, a[i], now);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; t[<span class="number">1</span>].f.<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) <span class="keyword">if</span> (t[<span class="number">1</span>].f[i]) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 749 (Div.1 + Div.2)</title>
      <link href="/2021/10/21/Codeforces-Round-749-Div-1-Div-2/"/>
      <url>/2021/10/21/Codeforces-Round-749-Div-1-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://codeforces.com/contest/1586">点这里</a></p><h1 id="A-Windblume-Ode"><a href="#A-Windblume-Ode" class="headerlink" title="A. Windblume Ode"></a>A. Windblume Ode</h1><p>题意：取一个集合的最大子集使得sum不为质数。</p><p>直接上手猜的结论，最少有n-1个数，然后暴力去判就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            ans += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">is_prime</span>(ans)) &#123;</span><br><span class="line">            cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">is_prime</span>(ans-a[i])) &#123;</span><br><span class="line">                    f = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != f) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Omkar-and-Heavenly-Tree"><a href="#B-Omkar-and-Heavenly-Tree" class="headerlink" title="B. Omkar and Heavenly Tree"></a>B. Omkar and Heavenly Tree</h1><p>题意：有一棵树，给m个三元关系{ai,bi,ci}表示节点ai和ci的简单路径中不能存在bi节点，问构造方法</p><p>还是比较简单的构造，直接考虑不能位于中间的点个数最多为$m &lt; n$,也就是说肯定会有一个点不受任何限制。我们直接让这个点与所有点相连，变成菊花图即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; cin &gt;&gt; T; <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            vis[b] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) t = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != t) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Omkar-and-Determination"><a href="#C-Omkar-and-Determination" class="headerlink" title="C. Omkar and Determination"></a>C. Omkar and Determination</h1><p>题意: 简化一下题意，其实就是问[l,r]列中的子图构成的迷宫中，是否有‘.’无法从迷宫中逃生。</p><p>其实我们只需要关注当前列是否存在一个’.’,且它无法逃生，判断这个很简单，只需要知道它的上面和左边是否存在’X’就行。然后我们记一个前缀和sum[i]表示到第i列为止，一共有多少列存在无法逃生的点，然后取子图时只需要比较前缀和sum[l]和sum[r]是否相等就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string s[N];</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i][j<span class="number">-1</span>] == <span class="string">&#x27;X&#x27;</span> &amp;&amp; s[i<span class="number">-1</span>][j] == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                f[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) f[i] += f[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> q; cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r; cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l--, r--;</span><br><span class="line">        <span class="keyword">if</span> (f[r] == f[l]) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Omkar-and-the-Meaning-of-Life"><a href="#D-Omkar-and-the-Meaning-of-Life" class="headerlink" title="D. Omkar and the Meaning of Life"></a>D. Omkar and the Meaning of Life</h1><p>题意：你需要猜一个序列[1,n]，每次你都可以询问一个序列b，然后得到序列$ci=ai+bi$，返回ci中重复的数字的第一个下标。你最多可以询问2*n次。</p><p>首先我们可以用n次询问确定一个a[n]，只需要每次询问$b[n] = n$，$b[i]=i,i∈[1,n-1]$，当得到第一个非0返回值时，说明有一个数$y+i=a[n]+n$且y一定为n，因此$a[n]=i$。<br>然后我们已知a[n]后，将$b[i]=a[n]$，$b[n]=i$，这样得到返回值k时，$a[k]+a[n]=a[n]+i$，易得$a[k]=i$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[N], b[N], n, k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cout &lt;&lt; b[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout.<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        b[n] = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - <span class="number">1</span>; j++) b[j] = i;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;?&#x27;</span>, b);</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (k) &#123;</span><br><span class="line">            a[n] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!a[n]) a[n] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == a[n]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n<span class="number">-1</span>; j++) b[j] = a[n];</span><br><span class="line">        b[n] = i;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;?&#x27;</span>, b);</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        a[k] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;!&#x27;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Moment-of-Bloom"><a href="#E-Moment-of-Bloom" class="headerlink" title="E. Moment of Bloom"></a>E. Moment of Bloom</h1><p>题意：一个简单图，每次你可以将ai到bi路径上所有边+1，最后询问所有边权是否为偶数。如果是，输出路径，如果不是，输出最小操作使得全部变为偶数。</p><p>可以证明的一点是，如果所有边权为偶数，那么选择的所有点次数也一定是偶数。首先看No的情况，如果存在某个点被选择的次数为奇数，那么肯定是No，操作次数是cnt(奇数点个数)/2。</p><p>如果全部点都是偶数，那么先随便取一个生成树，然后暴力去跳父亲节点遍历就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N], fa[N], fat[N], dep[N];</span><br><span class="line">vector&lt;pii&gt; qry;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> far)</span> </span>&#123;</span><br><span class="line">    dep[x] = dep[far] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == far) <span class="keyword">continue</span>;</span><br><span class="line">        fat[v] = x;</span><br><span class="line">        <span class="built_in">dfs</span>(v, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(u) != <span class="built_in">find</span>(v)) &#123;</span><br><span class="line">            fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> q; cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r; cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cnt[l]++, cnt[r]++;</span><br><span class="line">        qry.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (cnt[i] % <span class="number">2</span>) num++;</span><br><span class="line">    <span class="keyword">if</span> (num) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; num / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : qry) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = it.fi, r = it.se;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; ans1, ans2;</span><br><span class="line">            <span class="keyword">while</span> (l != r) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dep[l] &gt;= dep[r]) &#123;</span><br><span class="line">                    ans1.<span class="built_in">push_back</span>(l);</span><br><span class="line">                    l = fat[l];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans2.<span class="built_in">push_back</span>(r);</span><br><span class="line">                    r = fat[r];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans1.<span class="built_in">push_back</span>(l);</span><br><span class="line">            <span class="built_in">reverse</span>(ans2.<span class="built_in">begin</span>(), ans2.<span class="built_in">end</span>());</span><br><span class="line">            cout &lt;&lt; ans1.<span class="built_in">size</span>() + ans2.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> item : ans1) cout &lt;&lt; item &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> item : ans2) cout &lt;&lt; item &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 410 (Div.2)</title>
      <link href="/2021/10/20/Codeforces-Round-410-Div-2/"/>
      <url>/2021/10/20/Codeforces-Round-410-Div-2/</url>
      
        <content type="html"><![CDATA[<p>比赛链接<a href="https://codeforces.ml/contest/798">点这里</a></p><h1 id="A-Mike-and-palindrome"><a href="#A-Mike-and-palindrome" class="headerlink" title="A. Mike and palindrome"></a>A. Mike and palindrome</h1><p>必须改变一个字母，使得字符串变成回文串。</p><p>直接暴力枚举每个字符然后判断就行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[s.<span class="built_in">size</span>()-i<span class="number">-1</span>] != s[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> tmp = s[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">            s[i] = <span class="string">&#x27;a&#x27;</span> + j;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == tmp) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(s)) f = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Mike-and-strings"><a href="#B-Mike-and-strings" class="headerlink" title="B. Mike and strings"></a>B. Mike and strings</h1><p>也是暴力。</p><p>直接枚举最后全部变成第i个字符串，然后取min就可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line">string s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; s[i];</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s[<span class="number">1</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        string tmp = s[i];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ff = <span class="number">0</span>;</span><br><span class="line">            string back = s[j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= len; t++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp == s[j]) &#123;</span><br><span class="line">                    ff = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                s[j].<span class="built_in">push_back</span>(*s[j].<span class="built_in">begin</span>());</span><br><span class="line">                s[j].<span class="built_in">erase</span>(s[j].<span class="built_in">begin</span>());</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ff) &#123;</span><br><span class="line">                f = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s[j] = back;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Mike-and-gcd-problem"><a href="#C-Mike-and-gcd-problem" class="headerlink" title="C. Mike and gcd problem"></a>C. Mike and gcd problem</h1><p>最开始直接判定gcd是否&gt;1,如果大于1，直接输出结果。</p><p>接着扫一遍，将所有都变成偶数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    ll gcd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) gcd = __gcd(gcd, a[i]);</span><br><span class="line">    <span class="keyword">if</span> (gcd &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (a[i] % <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> t1 = <span class="built_in">abs</span>(a[i+<span class="number">1</span>] - a[i]), t2 = a[i+<span class="number">1</span>] + a[i];</span><br><span class="line">                a[i] = t1;</span><br><span class="line">                a[i+<span class="number">1</span>] = t2;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Mike-and-distribution"><a href="#D-Mike-and-distribution" class="headerlink" title="D. Mike and distribution"></a>D. Mike and distribution</h1><p>直接用rand做的，貌似可以过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n;</span><br><span class="line">    ll sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i], sum1 += a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; b[i], sum2 += b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i] = i;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">random_shuffle</span>(c+<span class="number">1</span>, c+n+<span class="number">1</span>);</span><br><span class="line">        ll ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            ans1 += a[c[i]];</span><br><span class="line">            ans2 += b[c[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans1 * <span class="number">2</span> &gt; sum1 &amp;&amp; ans2 * <span class="number">2</span> &gt; sum2) &#123;</span><br><span class="line">            cout &lt;&lt; n / <span class="number">2</span> + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>+<span class="number">1</span>; i++) cout &lt;&lt; c[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Codeforces日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 223</title>
      <link href="/2021/10/19/AtCoder-Beginner-Contest-223/"/>
      <url>/2021/10/19/AtCoder-Beginner-Contest-223/</url>
      
        <content type="html"><![CDATA[<p>比赛链接：<a href="https://atcoder.jp/contests/abc223/tasks">点这里</a></p><h1 id="A-Exact-Price"><a href="#A-Exact-Price" class="headerlink" title="A. Exact Price"></a>A. Exact Price</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">100</span> == <span class="number">0</span> &amp;&amp; n / <span class="number">100</span> &gt;= <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-String-Shifting"><a href="#B-String-Shifting" class="headerlink" title="B. String Shifting"></a>B. String Shifting</h1><p>直接暴力找出所有字符串排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">vector&lt;string&gt; ve;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s; cin &gt;&gt; s;</span><br><span class="line">    ve.<span class="built_in">push_back</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        s = s.<span class="built_in">back</span>() + s;</span><br><span class="line">        s.<span class="built_in">pop_back</span>();</span><br><span class="line">        ve.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; ve[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ve[ve.<span class="built_in">size</span>()<span class="number">-1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Doukasen"><a href="#C-Doukasen" class="headerlink" title="C. Doukasen"></a>C. Doukasen</h1><p>找到一半的时间点，然后暴力找一遍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="keyword">double</span> t[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        t[i] = a[i] * <span class="number">1.0</span> / b[i];</span><br><span class="line">        sum += t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum - t[i] &gt;= eps) &#123;</span><br><span class="line">            ans += a[i];</span><br><span class="line">            sum -= t[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += a[i] * (sum / t[i]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Restricted-Permutation"><a href="#D-Restricted-Permutation" class="headerlink" title="D. Restricted Permutation"></a>D. Restricted Permutation</h1><p>根据优先级拓扑建边，然后用优先队列贪心最小的下标</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="keyword">int</span> in[N], n;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; g[N], order;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tupo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        order.<span class="built_in">push_back</span>(now);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : g[now]) &#123;</span><br><span class="line">            --in[v];</span><br><span class="line">            <span class="keyword">if</span> (!in[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        in[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tupo</span>();</span><br><span class="line">    <span class="keyword">if</span> (order.<span class="built_in">size</span>() != n) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : order) cout &lt;&lt; it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Parenthesis-Checking"><a href="#F-Parenthesis-Checking" class="headerlink" title="F. Parenthesis Checking"></a>F. Parenthesis Checking</h1><p>线段树维护前缀和，一个区间是合法的当且仅当区间和为0，且区间和恒不小于0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit (-x&amp;x)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> mi, tag;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    t[u].mi = <span class="built_in">min</span>(t[u&lt;&lt;<span class="number">1</span>].mi, t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u].tag) &#123;</span><br><span class="line">        t[u&lt;&lt;<span class="number">1</span>].mi += t[u].tag;</span><br><span class="line">        t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mi += t[u].tag;</span><br><span class="line">        t[u&lt;&lt;<span class="number">1</span>].tag += t[u].tag;</span><br><span class="line">        t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].tag += t[u].tag;</span><br><span class="line">        t[u].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[u].l = l, t[u].r = r;</span><br><span class="line">    t[u].mi = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[u].mi = sum[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; qr &gt;= t[u].r) &#123;</span><br><span class="line">        t[u].mi += val;</span><br><span class="line">        t[u].tag += val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="keyword">int</span> mid = (t[u].l + t[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>, ql, qr, val);</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, ql, qr, val);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= t[u].l &amp;&amp; qr &gt;= t[u].r) <span class="keyword">return</span> t[u].mi;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="keyword">int</span> mid = (t[u].l + t[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mi = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) mi = <span class="built_in">min</span>(mi, <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>, ql, qr));</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) mi = <span class="built_in">min</span>(mi, <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, ql, qr));</span><br><span class="line">    <span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    cin &gt;&gt; (s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) sum[i] = sum[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> sum[i] = sum[i<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, l, r; cin &gt;&gt; opt &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[r] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                s[l] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">                s[r] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">1</span>, l, n, <span class="number">-2</span>);</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">1</span>, r, n, <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[l] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; s[r] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                s[l] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">                s[r] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">1</span>, l, n, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">1</span>, r, n, <span class="number">-2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pre = <span class="built_in">query</span>(<span class="number">1</span>, l - <span class="number">1</span>, l - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> lst = <span class="built_in">query</span>(<span class="number">1</span>, r, r);</span><br><span class="line">            <span class="keyword">if</span> (lst != pre || <span class="built_in">query</span>(<span class="number">1</span>, l, r) &lt; pre) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ACM_LOCAL</span></span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">clock</span>();</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Run Time: &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-Vertex-Deletion"><a href="#G-Vertex-Deletion" class="headerlink" title="G. Vertex Deletion"></a>G. Vertex Deletion</h1><p>待补</p><h1 id="H-Xor-Query"><a href="#H-Xor-Query" class="headerlink" title="H. Xor Query"></a>H. Xor Query</h1><p>待补</p>]]></content>
      
      
      <categories>
          
          <category> 训练日常 </category>
          
          <category> Atcoder日常训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atcoder日常训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-10-18 记</title>
      <link href="/2021/10/18/2021-10-18-%E8%AE%B0/"/>
      <url>/2021/10/18/2021-10-18-%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>事与愿违</p><p>编辑了一遍又一遍的夺冠朋友圈，精心挑选了一张又一张的照片，一个编织了五年的仲夏夜之梦碎在了罗马尼亚。</p><pre><code>                                                                                        --记Ti10 LGD失利</code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 生活碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
